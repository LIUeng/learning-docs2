import{_ as a,o as e,c as t,Q as l}from"./chunks/framework.7c0fadea.js";const q=JSON.parse('{"title":"IEEE 754","description":"","frontmatter":{},"headers":[],"relativePath":"articles/basic/ieee.md","filePath":"articles/basic/ieee.md","lastUpdated":1701138872000}'),o={name:"articles/basic/ieee.md"},d=l(`<h1 id="ieee-754" tabindex="-1">IEEE 754 <a class="header-anchor" href="#ieee-754" aria-label="Permalink to &quot;IEEE 754&quot;">​</a></h1><blockquote><p>现代计算机中的浮点</p></blockquote><h2 id="基本格式" tabindex="-1">基本格式 <a class="header-anchor" href="#基本格式" aria-label="Permalink to &quot;基本格式&quot;">​</a></h2><h3 id="单精度" tabindex="-1">单精度 <a class="header-anchor" href="#单精度" aria-label="Permalink to &quot;单精度&quot;">​</a></h3><p>占用 32 位（4 字节）的二进制格式，其有效数字为 24 位（约 7 个十进制数）的精度</p><h3 id="双精度" tabindex="-1">双精度 <a class="header-anchor" href="#双精度" aria-label="Permalink to &quot;双精度&quot;">​</a></h3><p>占用 64 位（8 字节）的二进制格式，其有效数字为 53 位（约 15 - 17 个十进制数）的精度</p><h3 id="双重扩展" tabindex="-1">双重扩展 <a class="header-anchor" href="#双重扩展" aria-label="Permalink to &quot;双重扩展&quot;">​</a></h3><p>二进制格式至少占用 79 位（约 19 个十进制数）的精度</p><h3 id="四倍精度" tabindex="-1">四倍精度 <a class="header-anchor" href="#四倍精度" aria-label="Permalink to &quot;四倍精度&quot;">​</a></h3><p>128 位（16 字节）的二进制格式（约 34 个十进制数）的精度</p><h3 id="decimal64-decimal128" tabindex="-1">Decimal64 decimal128 <a class="header-anchor" href="#decimal64-decimal128" aria-label="Permalink to &quot;Decimal64 decimal128&quot;">​</a></h3><p>十进制舍入</p><h3 id="半精度" tabindex="-1">半精度 <a class="header-anchor" href="#半精度" aria-label="Permalink to &quot;半精度&quot;">​</a></h3><p>binary16 16 位浮点值</p><h2 id="浮点数范围" tabindex="-1">浮点数范围 <a class="header-anchor" href="#浮点数范围" aria-label="Permalink to &quot;浮点数范围&quot;">​</a></h2><blockquote><p>64 位双精度 = 具有 53 位（包含一个隐含位）1 个符号位 11 个指数位的系数（指数可以表示的数 2^-1022 ≈ 2×10^-308 - 2^1024 ≈ 2 x 10^308)</p></blockquote><h3 id="字节序-endian" tabindex="-1">字节序（Endian） <a class="header-anchor" href="#字节序-endian" aria-label="Permalink to &quot;字节序（Endian）&quot;">​</a></h3><p>浮点数以大字节序形式表示，整数以小字节序表示</p><h3 id="整数值的精度限制" tabindex="-1">整数值的精度限制 <a class="header-anchor" href="#整数值的精度限制" aria-label="Permalink to &quot;整数值的精度限制&quot;">​</a></h3><ul><li>可以精确表示从-2^53 到 2^53（−9007199254740992 到 9007199254740992）的整数</li><li>2^53 和 2^54 之间的整数= 18014398509481984，取整为 2 的倍数（偶数）</li><li>2^54 和 2^55 之间的整数= 36028797018963968 舍入为 4 的倍数</li></ul><h2 id="内部表示" tabindex="-1">内部表示 <a class="header-anchor" href="#内部表示" aria-label="Permalink to &quot;内部表示&quot;">​</a></h2><table><thead><tr><th>类型</th><th>标志</th><th>指数</th><th>有效域</th><th>总位数</th><th>指数偏差</th><th>位精度</th><th>小数位数</th></tr></thead><tbody><tr><td>16（IEEE 754-2008）</td><td>1 个</td><td>5</td><td>10</td><td>16</td><td>15</td><td>11</td><td>〜3.3</td></tr><tr><td>32</td><td>1 个</td><td>8</td><td>23</td><td>32</td><td>127</td><td>24</td><td>〜7.2</td></tr><tr><td>64</td><td>1 个</td><td>11</td><td>52</td><td>64</td><td>1023</td><td>53</td><td>〜15.9</td></tr><tr><td>x86</td><td>1 个</td><td>15</td><td>64</td><td>80</td><td>16383</td><td>64</td><td>〜19.2</td></tr><tr><td>128</td><td>1 个</td><td>15</td><td>112</td><td>128</td><td>16383</td><td>113</td><td>〜34.0</td></tr></tbody></table><h2 id="javascript-数表示" tabindex="-1">JavaScript 数表示 <a class="header-anchor" href="#javascript-数表示" aria-label="Permalink to &quot;JavaScript 数表示&quot;">​</a></h2><p><code>JavaScript</code> 中采用 <code>IEEE754 64</code> 位浮点数标准，<code>1</code> 位表示标志位，<code>11</code> 位指数位，<code>52</code> 位有效域（有效数字 <code>53</code> 位，包含一位隐含位）</p><h2 id="进制转换" tabindex="-1">进制转换 <a class="header-anchor" href="#进制转换" aria-label="Permalink to &quot;进制转换&quot;">​</a></h2><h3 id="二进制转换" tabindex="-1">二进制转换 <a class="header-anchor" href="#二进制转换" aria-label="Permalink to &quot;二进制转换&quot;">​</a></h3><h4 id="整数" tabindex="-1">整数 <a class="header-anchor" href="#整数" aria-label="Permalink to &quot;整数&quot;">​</a></h4><p>整数除余法</p><p>8 / 2 = 4 余 0 4 / 2 = 2 余 0 2 / 2 = 1 余 0</p><p>十进制 8 转换为二进制为 1000</p><h4 id="小数" tabindex="-1">小数 <a class="header-anchor" href="#小数" aria-label="Permalink to &quot;小数&quot;">​</a></h4><p>长乘法</p><p>0.1 _ 2 = 0.2 --- 0 0.2 _ 2 = 0.4 --- 0 0.4 _ 2 = 0.8 --- 0 0.8 _ 2 = 1.6 --- 1 0.6 _ 2 = 1.2 --- 1 0.2 _ 2 = 0.4 --- 0</p><p>依次类推</p><h3 id="十六进制转换" tabindex="-1">十六进制转换 <a class="header-anchor" href="#十六进制转换" aria-label="Permalink to &quot;十六进制转换&quot;">​</a></h3><p>二进制 -&gt; 十六进制 2 ^ 4 = 16</p><p>3A(16) = 00111010(2) E7(16) = 11100111(2)</p><h3 id="八进制转换" tabindex="-1">八进制转换 <a class="header-anchor" href="#八进制转换" aria-label="Permalink to &quot;八进制转换&quot;">​</a></h3><p>二进制 -&gt; 八进制 2 ^ 3 = 8</p><p>65(8) = 110101(2) 17(8) = 001111(2)</p><h2 id="计算机编码方式" tabindex="-1">计算机编码方式 <a class="header-anchor" href="#计算机编码方式" aria-label="Permalink to &quot;计算机编码方式&quot;">​</a></h2><div class="language-tip vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tip</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">带符号位的机器数对应的真正数值称为机器数的真值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">带符号位的机器数对应的真正数值称为机器数的真值</span></span></code></pre></div><p>机器存储一个具体数字的编码方式</p><h3 id="原码" tabindex="-1">原码 <a class="header-anchor" href="#原码" aria-label="Permalink to &quot;原码&quot;">​</a></h3><p>符号位加上真值的绝对值，即用第一位表示符号，其余位表示值</p><h3 id="反码" tabindex="-1">反码 <a class="header-anchor" href="#反码" aria-label="Permalink to &quot;反码&quot;">​</a></h3><p>正数的反码是其本身，负数的反码是在其原码的基础上，符号位不变，其余各个位取反</p><blockquote><p>减法 存在两个编码问题</p></blockquote><h3 id="补码" tabindex="-1">补码 <a class="header-anchor" href="#补码" aria-label="Permalink to &quot;补码&quot;">​</a></h3><blockquote><p>解决了两个编码问题[+0] [-0] 扩充了负数的最小值，以8位二进制为例[10000000, 01111111] = [-128, 127]</p></blockquote><p>反码 + 1</p><blockquote><p>负数二进制可以用补码表示</p></blockquote><ul><li>补码具有两种表示形式：0：00000000（+0）和 11111111（-0）</li></ul><p>二进制十进制(+1)</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">    11111110 -1</span></span>
<span class="line"><span style="color:#e1e4e8;">+   00000010 +2</span></span>
<span class="line"><span style="color:#e1e4e8;">────────────</span></span>
<span class="line"><span style="color:#e1e4e8;">    100000000 0 ← 不是正确的答案</span></span>
<span class="line"><span style="color:#e1e4e8;">            1 +1 ← 加进位</span></span>
<span class="line"><span style="color:#e1e4e8;">────────────</span></span>
<span class="line"><span style="color:#e1e4e8;">  00000001 1 ← 正确答案</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">    11111110 -1</span></span>
<span class="line"><span style="color:#24292e;">+   00000010 +2</span></span>
<span class="line"><span style="color:#24292e;">────────────</span></span>
<span class="line"><span style="color:#24292e;">    100000000 0 ← 不是正确的答案</span></span>
<span class="line"><span style="color:#24292e;">            1 +1 ← 加进位</span></span>
<span class="line"><span style="color:#24292e;">────────────</span></span>
<span class="line"><span style="color:#24292e;">  00000001 1 ← 正确答案</span></span></code></pre></div><ul><li>二进制正数转换负数 正数的二进制取反+1</li></ul><p>e.q +2 = 00000010 = 取反 11111101 + 1 = 11111110(-2 的补码形式)</p><h2 id="_0-6-0-3-0-9" tabindex="-1">0.6 + 0.3 != 0.9 <a class="header-anchor" href="#_0-6-0-3-0-9" aria-label="Permalink to &quot;0.6 + 0.3 != 0.9&quot;">​</a></h2><p>例子：说明浮点数相加之后的偏差原因</p><blockquote><p>双精度浮点数，1位符号位，11位指数位，52位尾数</p></blockquote><h3 id="_0-6-的二进制" tabindex="-1">0.6 的二进制 <a class="header-anchor" href="#_0-6-的二进制" aria-label="Permalink to &quot;0.6 的二进制&quot;">​</a></h3><p>0.6 * 2 = 1.2 --- 1 0.2 * 2 = 0.4 --- 0 0.4 * 2 = 0.8 --- 0 0.8 * 2 = 1.6 --- 1 依次类推</p><blockquote><p>得到结果 0.6(10) = 0.1001 1001 1001(2) 指数表示法 0.6(10) = 1.001 1001 1001(2) * 2^-1</p></blockquote><h3 id="_0-3-的二进制" tabindex="-1">0.3 的二进制 <a class="header-anchor" href="#_0-3-的二进制" aria-label="Permalink to &quot;0.3 的二进制&quot;">​</a></h3><p>0.3 * 2 = 0.6 --- 0 0.6 * 2 = 1.2 --- 1 0.6 * 2 = 1.2 --- 1 0.2 * 2 = 0.4 --- 0 0.4 * 2 = 0.8 --- 0 0.8 * 2 = 1.6 --- 1 以此类推</p><blockquote><p>得到结果 0.3(10) = 0.011001(2) 指数对齐，右移一位 0.1001 1001 * 2^-1</p></blockquote><h3 id="指数对齐相加" tabindex="-1">指数对齐相加 <a class="header-anchor" href="#指数对齐相加" aria-label="Permalink to &quot;指数对齐相加&quot;">​</a></h3><p>0.6 + 0.3</p><p>1.0011 001... 0.1001 100... 1.1100 101...</p><blockquote><p>0.11100 101 1 * 2^-1 + 1 * 2^-2 + ... + x^-52 得到近似结果 0.8999999999999999</p></blockquote><h3 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h3><ul><li>toFixed</li><li>toPrecision</li><li>三方库 <ul><li>math.js</li><li>decimal.js</li><li>big.js</li></ul></li></ul>`,73),s=[d];function i(n,r,p,c,h,u){return e(),t("div",null,s)}const k=a(o,[["render",i]]);export{q as __pageData,k as default};
