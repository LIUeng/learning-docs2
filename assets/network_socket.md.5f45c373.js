import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.7c0fadea.js";const k=JSON.parse('{"title":"Socket","description":"","frontmatter":{},"headers":[],"relativePath":"network/socket.md","filePath":"network/socket.md","lastUpdated":1670330848000}'),l={name:"network/socket.md"},o=n(`<h1 id="socket" tabindex="-1">Socket <a class="header-anchor" href="#socket" aria-label="Permalink to &quot;Socket&quot;">​</a></h1><h2 id="socket-1" tabindex="-1">Socket <a class="header-anchor" href="#socket-1" aria-label="Permalink to &quot;Socket&quot;">​</a></h2><p>套接字(Socket)，对网络中不同主机的应用进程之间进行双向通信的端点的抽象（应用程序访问通信协议的操作系统调用套接字）</p><ul><li>套接字上联应用进程，下联网络协议栈</li><li>应用程序通过网络协议进行通信的接口</li><li>应用程序与网络协议栈进行交互的接口</li></ul><h3 id="表示方法" tabindex="-1">表示方法 <a class="header-anchor" href="#表示方法" aria-label="Permalink to &quot;表示方法&quot;">​</a></h3><p>IP 地址:端口号</p><h3 id="连接" tabindex="-1">连接 <a class="header-anchor" href="#连接" aria-label="Permalink to &quot;连接&quot;">​</a></h3><p>一对套接字：Client Socket/Servre Socket</p><ul><li>服务器监听</li></ul><p>服务器端套接字并不定位具体的客户端套接字，处于等待连接的状态，试试监控网络状态</p><ul><li>客户端请求</li></ul><p>客户端的套接字提出连接请求，要连接的目标是服务器端的套接字</p><ul><li>连接确认</li></ul><p>服务端套接字接收到客户端套接字的连接请求，响应客户端套接字的请求，建立新的线程，并把服务器端套接字的描述发送给客户端。客户端确认了此描述，连接建立，服务器端套接字继续处于监听状态，接收其他客户端套接字的连接请求</p><h2 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h2><p>浏览器中用于双向通信的一种 TCP 传输协议，并复用 HTTP 的握手通道</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>支持双向通信，实时性更强</li><li>更好的二进制支持</li><li>较少的控制开销（数据包+4 字节的掩码，而 HTTP 每次请求都要携带完整的头部）</li><li>支持扩展（WS 协议定义了扩展，自定义扩展协议、自协议）自定义压缩算法</li></ul><h3 id="建立连接" tabindex="-1">建立连接 <a class="header-anchor" href="#建立连接" aria-label="Permalink to &quot;建立连接&quot;">​</a></h3><blockquote><p>客户端：申请协议升级</p></blockquote><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">GET / HTTP/1.1</span></span>
<span class="line"><span style="color:#e1e4e8;">Host: localhost:8080</span></span>
<span class="line"><span style="color:#e1e4e8;">Origin: http://127.0.0.1:3000</span></span>
<span class="line"><span style="color:#e1e4e8;">Connection: Upgrade</span></span>
<span class="line"><span style="color:#e1e4e8;">Upgrade: websocket</span></span>
<span class="line"><span style="color:#e1e4e8;">Sec-WebSocket-Version: 13</span></span>
<span class="line"><span style="color:#e1e4e8;">Sec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">GET / HTTP/1.1</span></span>
<span class="line"><span style="color:#24292e;">Host: localhost:8080</span></span>
<span class="line"><span style="color:#24292e;">Origin: http://127.0.0.1:3000</span></span>
<span class="line"><span style="color:#24292e;">Connection: Upgrade</span></span>
<span class="line"><span style="color:#24292e;">Upgrade: websocket</span></span>
<span class="line"><span style="color:#24292e;">Sec-WebSocket-Version: 13</span></span>
<span class="line"><span style="color:#24292e;">Sec-WebSocket-Key: w4v7O6xFTi36lq3RNcgctw==</span></span></code></pre></div><blockquote><p>服务端：响应协议升级</p></blockquote><p>状态代码 101 表示协议切换</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">HTTP/1.1 101 Switching Protocols</span></span>
<span class="line"><span style="color:#e1e4e8;">Connection:Upgrade</span></span>
<span class="line"><span style="color:#e1e4e8;">Upgrade: websocket</span></span>
<span class="line"><span style="color:#e1e4e8;">Sec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">HTTP/1.1 101 Switching Protocols</span></span>
<span class="line"><span style="color:#24292e;">Connection:Upgrade</span></span>
<span class="line"><span style="color:#24292e;">Upgrade: websocket</span></span>
<span class="line"><span style="color:#24292e;">Sec-WebSocket-Accept: Oy4NRAQ13jhfONC7bP8dTKb4PTU=</span></span></code></pre></div><h3 id="连接保持-心跳" tabindex="-1">连接保持+心跳 <a class="header-anchor" href="#连接保持-心跳" aria-label="Permalink to &quot;连接保持+心跳&quot;">​</a></h3><p>长时间没有数据往来的连接，长时间保持会浪费连接资源（采用心跳实现）</p><ul><li>发送方 -&gt; 接收方 ping</li><li>接收方 -&gt; 发送方 pong</li></ul><h3 id="响应头-请求头" tabindex="-1">响应头/请求头 <a class="header-anchor" href="#响应头-请求头" aria-label="Permalink to &quot;响应头/请求头&quot;">​</a></h3><h4 id="sec-websocket-key-sec-websocket-accept" tabindex="-1">Sec-WebSocket-Key/Sec-Websocket-Accept <a class="header-anchor" href="#sec-websocket-key-sec-websocket-accept" aria-label="Permalink to &quot;Sec-WebSocket-Key/Sec-Websocket-Accept&quot;">​</a></h4><ul><li>避免服务端收到非法的 websocket 连接</li><li>确保服务端理解 WebSocket 连接</li><li>请求设置 header 时是被禁止的</li><li>对于反向代理服务器来说，可以理解 WebSocket 握手不会产生无用的缓存</li></ul><h3 id="遇到的一些问题" tabindex="-1">遇到的一些问题 <a class="header-anchor" href="#遇到的一些问题" aria-label="Permalink to &quot;遇到的一些问题&quot;">​</a></h3><blockquote><p>如何计算响应头中 Sec-Websocket-Accept 的值</p></blockquote><p>服务器获取握手请求中的 Sec-WebSocket-Key 的值，然后附加 GUID(Globally Unique Identifier 258EAFA5-E914-47DA-95CA-C5AB0DC85B11)，采用新的 SHA-1 值，进行 base64 编码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">createHash</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;crypto&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.headers[</span><span style="color:#9ECBFF;">&#39;sec-websocket-key&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">tirm</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 这里结果就是 Sec-Websocket-Accept 响应值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">digest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createHash</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;sha1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(key </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GUID</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">digest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;base64&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">createHash</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;crypto&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.headers[</span><span style="color:#032F62;">&#39;sec-websocket-key&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">tirm</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 这里结果就是 Sec-Websocket-Accept 响应值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">digest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createHash</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;sha1&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GUID</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">digest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;base64&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div>`,34),p=[o];function c(t,r,i,y,d,h){return a(),e("div",null,p)}const b=s(l,[["render",c]]);export{k as __pageData,b as default};
