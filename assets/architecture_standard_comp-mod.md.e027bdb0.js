import{_ as a,o as e,c as i,Q as l}from"./chunks/framework.0e8ae64e.js";const p=JSON.parse('{"title":"组件化与模块化设计","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/standard/comp-mod.md","filePath":"architecture/standard/comp-mod.md","lastUpdated":1670330848000}'),t={name:"architecture/standard/comp-mod.md"},o=l('<h1 id="组件化与模块化设计" tabindex="-1">组件化与模块化设计 <a class="header-anchor" href="#组件化与模块化设计" aria-label="Permalink to &quot;组件化与模块化设计&quot;">​</a></h1><h2 id="模块化设计" tabindex="-1">模块化设计 <a class="header-anchor" href="#模块化设计" aria-label="Permalink to &quot;模块化设计&quot;">​</a></h2><h3 id="应用的模块与层级划分" tabindex="-1">应用的模块与层级划分 <a class="header-anchor" href="#应用的模块与层级划分" aria-label="Permalink to &quot;应用的模块与层级划分&quot;">​</a></h3><ul><li>对于简单的管理端应用，可以采用类似MVC结构进行拆分（视图模块、数据模块、逻辑控制模块）</li><li>对于页面内容丰富的应用，可以结合业务进行细分和组件拆分（核心模块、功能模块、公共组件）</li><li>对于交互和逻辑复杂的应用，可以根据系统架构将应用进行模块和层级的划分（渲染层、数据层、网络层）</li></ul><h3 id="模块划分与设计原则" tabindex="-1">模块划分与设计原则 <a class="header-anchor" href="#模块划分与设计原则" aria-label="Permalink to &quot;模块划分与设计原则&quot;">​</a></h3><ul><li>领域驱动设计（Domain-Driven Design DDD）：从业务领域的角度来对系统进行领域划分和建模</li><li>职责驱动设计（Responsibility-Driven Design RDD）：从系统内部的角度来进行职责划分，模块拆分以及协作方式</li></ul><h3 id="如何进行模块间依赖的解耦" tabindex="-1">如何进行模块间依赖的解耦 <a class="header-anchor" href="#如何进行模块间依赖的解耦" aria-label="Permalink to &quot;如何进行模块间依赖的解耦&quot;">​</a></h3><p><code>高内聚 低耦合</code></p><ul><li>低耦合基于抽象，使系统更具模块化，不相关的事物不应相互依赖</li><li>高内聚则意味着对象专注于单一职责</li></ul><p><code>依赖倒置</code></p><ul><li>高层次的模块不应该依赖低层次的模块，两者都应该依赖于抽象接口</li><li>抽象接口不应该依赖于具体实现，而具体实现则依赖于抽象接口</li></ul><p><code>事件驱动</code></p><ul><li>Nodejs 的 Event/Emitter</li></ul><h2 id="组件化设计" tabindex="-1">组件化设计 <a class="header-anchor" href="#组件化设计" aria-label="Permalink to &quot;组件化设计&quot;">​</a></h2><h3 id="组件划分" tabindex="-1">组件划分 <a class="header-anchor" href="#组件划分" aria-label="Permalink to &quot;组件划分&quot;">​</a></h3><ul><li>代码复用划分</li><li>视觉和交互划分</li></ul><h3 id="组件封装" tabindex="-1">组件封装 <a class="header-anchor" href="#组件封装" aria-label="Permalink to &quot;组件封装&quot;">​</a></h3><ul><li>组件内维护自身的数据和状态</li><li>组件内维护自身的事件</li><li>对外提供配置接口，控制展示以及具体功能</li><li>对外提供查询接口，获取组件的状态和数据</li></ul>',18),r=[o];function d(n,c,h,s,u,_){return e(),i("div",null,r)}const b=a(t,[["render",d]]);export{p as __pageData,b as default};
