import{_ as a,o as t,c as l,Q as s}from"./chunks/framework.0e8ae64e.js";const E=JSON.parse('{"title":"前端文档","description":"","frontmatter":{},"headers":[],"relativePath":"articles/advanced/docs.md","filePath":"articles/advanced/docs.md","lastUpdated":1670330848000}'),n={name:"articles/advanced/docs.md"},e=s(`<h1 id="前端文档" tabindex="-1">前端文档 <a class="header-anchor" href="#前端文档" aria-label="Permalink to &quot;前端文档&quot;">​</a></h1><blockquote><p>以下图片失效，有兴趣打开原文阅读</p></blockquote><p><a href="https://juejin.cn/post/6844904192792870919" target="_blank" rel="noreferrer">原文阅读</a></p><ul><li>文档桌面应用客户端 ------ word excel ppt wps ···</li><li>在线文档(类似) ------ <a href="https://docs.google.com" target="_blank" rel="noreferrer">google 文档</a></li></ul><h2 id="前端文档浅思考" tabindex="-1">前端文档浅思考 <a class="header-anchor" href="#前端文档浅思考" aria-label="Permalink to &quot;前端文档浅思考&quot;">​</a></h2><p><strong>如果你去开发你会怎么做</strong></p><ul><li>input?</li><li>textarea?</li><li>div?contenteditable?(富文本可编辑属性)</li></ul><h3 id="富文本编辑" tabindex="-1">富文本编辑 <a class="header-anchor" href="#富文本编辑" aria-label="Permalink to &quot;富文本编辑&quot;">​</a></h3><p>以下 API 来自[JavaScript 高级程序设计第三版]</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 文档执行预定义命令，接收三个参数</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 要执行的命令名称</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 浏览器是否应该为当前的命令用户界面提供一个布尔值（兼容性，始终为false)</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 执行命令必须的一个值(无 =&gt; null)</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#B392F0;">execCommand</span><span style="color:#E1E4E8;">(name, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 文档执行预定义命令，接收三个参数</span></span>
<span class="line"><span style="color:#6A737D;">// 1. 要执行的命令名称</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 浏览器是否应该为当前的命令用户界面提供一个布尔值（兼容性，始终为false)</span></span>
<span class="line"><span style="color:#6A737D;">// 3. 执行命令必须的一个值(无 =&gt; null)</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">execCommand</span><span style="color:#24292E;">(name, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="操作富文本" tabindex="-1">操作富文本 <a class="header-anchor" href="#操作富文本" aria-label="Permalink to &quot;操作富文本&quot;">​</a></h4><blockquote><p>document.execCommand()</p></blockquote><table><thead><tr><th>命令</th><th>值(第三个字符串)</th><th>解释</th></tr></thead><tbody><tr><td>backColor</td><td>颜色字符串</td><td>设置文档的背景颜色</td></tr><tr><td>bold</td><td>null</td><td>加粗文字</td></tr><tr><td>copy</td><td>null</td><td>复制到剪贴板</td></tr><tr><td>createLinkt</td><td>url 字符串</td><td>转换成一个链接</td></tr><tr><td>cut</td><td>null</td><td>剪切</td></tr><tr><td>delete</td><td>null</td><td>删除选择的文本</td></tr><tr><td>fontname</td><td>字体名称</td><td>修改字体</td></tr><tr><td>fontsize</td><td>数字</td><td>字体大小</td></tr><tr><td>forecolor</td><td>颜色字符串</td><td>字体颜色</td></tr><tr><td>formatblock</td><td>要包围当前文本块的 html 标签</td><td>h1 h2 ~</td></tr><tr><td>indent</td><td>null</td><td>缩进文本</td></tr><tr><td>inserthorizontalrule</td><td>null</td><td>插入一个&lt;hr&gt;标签</td></tr><tr><td>insertimage</td><td>url 字符串</td><td>插入一张图片</td></tr><tr><td>insertorderedlist</td><td>null</td><td>&lt;ol&gt;</td></tr><tr><td>insertunorderedlist</td><td>null</td><td>&lt;ul&gt;</td></tr><tr><td>insertparagraph</td><td>null</td><td>&lt;p&gt;</td></tr><tr><td>italic</td><td>null</td><td>斜体</td></tr><tr><td>justifycenter</td><td>null</td><td>居中</td></tr><tr><td>justifyleft</td><td>null</td><td>左对齐</td></tr><tr><td>outdent</td><td>null</td><td>减少缩进</td></tr><tr><td>paste</td><td>null</td><td>粘贴</td></tr><tr><td>removeformat</td><td>null</td><td>撤销 formatblock 操作</td></tr><tr><td>selectall</td><td>null</td><td>选中所有文本</td></tr><tr><td>underline</td><td>null</td><td>下划线</td></tr><tr><td>unlink</td><td>null</td><td>移除文本的链接</td></tr></tbody></table><ul><li>document.queryCommandEnabled() 方法可以检测当前位置是否可以执行某个命令</li><li>document.queryCommandState() 方法可以检测当前文本是否执行过某个命令</li></ul><h4 id="富文本选区" tabindex="-1">富文本选区 <a class="header-anchor" href="#富文本选区" aria-label="Permalink to &quot;富文本选区&quot;">​</a></h4><p>获取选择文本</p><blockquote><p>(window || document).getSelection()</p></blockquote><p><strong>1. Selection 对象属性</strong></p><ul><li>anchorNode：选区起点所在的节点</li><li>anchorOffset：在到达选区起点位置之前跳过的 anchorNode 中的字符数量</li><li>focusNode：选区终点所在的节点</li><li>focusOffset：focusNode 中包含在选区之内的字符数量</li><li>isCollapsed：布尔值，表示选区的起点和终点是否重合</li><li>rangeCount：选区中包含的 DOM 范围的数量</li></ul><p><strong>2. Selection 对象方法</strong></p><ul><li>addRange(range)：将指定的 DOM 范围添加到选区中</li><li>collapse(node, offset)：将选区折叠到指定节点中的相应的文本偏移位置</li><li>collapseToEnd()：将选区折叠到终点位置</li><li>collapseToStart()：将选区折叠到起点位置</li><li>containsNode(node)：确定指定的节点是否包含在选区中</li><li>deleteFromDocument()：从文档中删除选区中的文本，与 document.execCommand(&quot;delete&quot;, false, null)命令的结果相同</li><li>extend(node, offset)：通过将 focusNode 和 focusOffset 移动到指定的值来扩展选区</li><li>getRangeAt(index)：返回索引对应的选区中的 DOM 范围</li><li>removeAllRanges()：从选区中移除所有 DOM 范围。实际上，这样会移除选区，因为选区中 至少要有一个范围</li><li>reomveRange(range)：从选区中移除指定的 DOM 范围</li><li>selectAllChildren(node)：清除选区并选择指定节点的所有子节点</li><li>toString()：返回选区所包含的文本内容</li></ul><p><strong>3. 示例：给选中的文本加上背景颜色</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 获取选区文本</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> selection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getSelection</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 获取选区范围</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> range </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> selection.</span><span style="color:#B392F0;">getRangeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建包围元素</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> span </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">span.style.backgroundColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;orange&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">range.</span><span style="color:#B392F0;">surroundContents</span><span style="color:#E1E4E8;">(span);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 获取选区文本</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> selection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getSelection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 获取选区范围</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> range </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> selection.</span><span style="color:#6F42C1;">getRangeAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 创建包围元素</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> span </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">span.style.backgroundColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;orange&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">range.</span><span style="color:#6F42C1;">surroundContents</span><span style="color:#24292E;">(span);</span></span></code></pre></div><h4 id="操作范围-dom2" tabindex="-1">操作范围 DOM2 <a class="header-anchor" href="#操作范围-dom2" aria-label="Permalink to &quot;操作范围 DOM2&quot;">​</a></h4><blockquote><p>document.createRange()</p></blockquote><ol><li>简单选择 DOM 范围</li><li>复杂选择 DOM 范围</li><li>操作 DOM 范围中的内容</li><li>插入 DOM 范围中的内容</li><li>折叠 DOM 范围</li><li>比较 DOM 范围</li></ol><h4 id="复合事件" tabindex="-1">复合事件 <a class="header-anchor" href="#复合事件" aria-label="Permalink to &quot;复合事件&quot;">​</a></h4><ul><li>compositionstart：在 IME 的文本复合系统打开时触发，表示要开始输入了</li><li>compositionupdate：在向输入字段中插入新字符时触发</li><li>compositionend：在 IME 的文本复合系统关闭时触发，表示返回正常键盘输入状态</li></ul><h2 id="前端文档深思考" tabindex="-1">前端文档深思考 <a class="header-anchor" href="#前端文档深思考" aria-label="Permalink to &quot;前端文档深思考&quot;">​</a></h2><blockquote><p>前端文档的技术该如何选择以及采坑？</p></blockquote><h3 id="同构表vs异构表" tabindex="-1">同构表VS异构表 <a class="header-anchor" href="#同构表vs异构表" aria-label="Permalink to &quot;同构表VS异构表&quot;">​</a></h3><h3 id="文档技术" tabindex="-1">文档技术 <a class="header-anchor" href="#文档技术" aria-label="Permalink to &quot;文档技术&quot;">​</a></h3><h3 id="在线协同" tabindex="-1">在线协同 <a class="header-anchor" href="#在线协同" aria-label="Permalink to &quot;在线协同&quot;">​</a></h3><h2 id="前端文档应用" tabindex="-1">前端文档应用 <a class="header-anchor" href="#前端文档应用" aria-label="Permalink to &quot;前端文档应用&quot;">​</a></h2><p>来看看一些用过的在线文档编辑设计思路以及架构模式</p><h3 id="钉钉" tabindex="-1">钉钉 <a class="header-anchor" href="#钉钉" aria-label="Permalink to &quot;钉钉&quot;">​</a></h3><p><strong>菜鸟业务WebExcel</strong></p><h3 id="语雀" tabindex="-1">语雀 <a class="header-anchor" href="#语雀" aria-label="Permalink to &quot;语雀&quot;">​</a></h3><p><strong>语雀自研之路</strong></p><h2 id="前端文档性能" tabindex="-1">前端文档性能 <a class="header-anchor" href="#前端文档性能" aria-label="Permalink to &quot;前端文档性能&quot;">​</a></h2><h3 id="大数据" tabindex="-1">大数据 <a class="header-anchor" href="#大数据" aria-label="Permalink to &quot;大数据&quot;">​</a></h3><blockquote><p>成千上百万的节点不可能一次性渲染出来，对于浏览器来说是一笔巨大的开销</p></blockquote><h3 id="最大单元格数" tabindex="-1">最大单元格数 <a class="header-anchor" href="#最大单元格数" aria-label="Permalink to &quot;最大单元格数&quot;">​</a></h3><blockquote><p>在线文档如何缓存数据，这也是必须值得思考的地方</p></blockquote><h2 id="前端文档展望" tabindex="-1">前端文档展望 <a class="header-anchor" href="#前端文档展望" aria-label="Permalink to &quot;前端文档展望&quot;">​</a></h2><h3 id="复杂度" tabindex="-1">\b复杂度 <a class="header-anchor" href="#复杂度" aria-label="Permalink to &quot;\b复杂度&quot;">​</a></h3><p>前端文档的复杂度很高，它的细腻程度非常之细，像语雀这种在线表格自研之路，考虑的问题很多；我作为一个普通开发者来说，开发的成本很大，但是前端文档非常值得思考，包括技术储备（数据结构性能优化）以及冷门的API学习都要串联起来</p><h3 id="未来" tabindex="-1">未来 <a class="header-anchor" href="#未来" aria-label="Permalink to &quot;未来&quot;">​</a></h3><p>前端文档是一个深耕并且值得投入的领域，用户的体验累积，会打造出越来越完美的前端文档</p><p>END</p>`,50),o=[e];function r(p,d,c,i,u,h){return t(),l("div",null,o)}const b=a(n,[["render",r]]);export{E as __pageData,b as default};
