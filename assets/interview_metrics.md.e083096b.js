import{_ as a,o as s,c as l,Q as e}from"./chunks/framework.7c0fadea.js";const E=JSON.parse('{"title":"性能指标","description":"","frontmatter":{},"headers":[],"relativePath":"interview/metrics.md","filePath":"interview/metrics.md","lastUpdated":1675328164000}'),n={name:"interview/metrics.md"},t=e(`<h1 id="性能指标" tabindex="-1">性能指标 <a class="header-anchor" href="#性能指标" aria-label="Permalink to &quot;性能指标&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>PerformanceObserver &amp; PerformanceEntry</p></div><h2 id="lcp" tabindex="-1">LCP <a class="header-anchor" href="#lcp" aria-label="Permalink to &quot;LCP&quot;">​</a></h2><p>Largest Contentful Paint（最大内容绘制）</p><blockquote><p>最大内容绘制控制在 2.5s 之内</p></blockquote><h3 id="如何衡量" tabindex="-1">如何衡量 <a class="header-anchor" href="#如何衡量" aria-label="Permalink to &quot;如何衡量&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>真正计算的指标存在差异</p></div><blockquote><p>Timing-Allow-Origin 资源指标是否允许跨域收集</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PerformanceObserver</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">entryList</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">entry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> entryList.</span><span style="color:#B392F0;">getEntries</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;LCP candidate:&#39;</span><span style="color:#E1E4E8;">, entry.startTime, entry);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;largest-contentful-paint&#39;</span><span style="color:#E1E4E8;">, buffered: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PerformanceObserver</span><span style="color:#24292E;">((</span><span style="color:#E36209;">entryList</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">entry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> entryList.</span><span style="color:#6F42C1;">getEntries</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;LCP candidate:&#39;</span><span style="color:#24292E;">, entry.startTime, entry);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&#39;largest-contentful-paint&#39;</span><span style="color:#24292E;">, buffered: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> });</span></span></code></pre></div><ul><li>API 会为在后台选项卡中加载的页面分发 largest-contentful-paint 条目，但在计算 LCP 时应忽略这些页面。</li><li>API 在页面转移到后台后，会继续分发 largest-contentful-paint 条目，但在计算 LCP 时应忽略这些条目（只有当页面始终处于前台时才考虑元素）。</li><li>当页面通过往返缓存恢复时，API 不会报告 largest-contentful-paint 条目，但在这些情况下应该测量 LCP，因为这对用户来说是多次不同的页面访问体验。</li><li>API 不考虑 iframe 中的元素，但要想正确测量 LCP，您应该考虑这些元素。子框架可以使用 API 将这些元素的 largest-contentful-paint 条目报告给父框架来进行聚合。</li></ul><h3 id="改进" tabindex="-1">改进 <a class="header-anchor" href="#改进" aria-label="Permalink to &quot;改进&quot;">​</a></h3><blockquote><p>因素</p></blockquote><ul><li>服务器响应速度</li><li>JavaScript 和 CSS 渲染阻塞</li><li>资源加载时间</li><li>客户端渲染</li></ul><blockquote><p>优化 LCP</p></blockquote><ul><li>PRPL</li><li>优化关键渲染路径</li><li>优化 CSS</li><li>图像</li><li>网页字体</li><li>JavaScript</li></ul><h3 id="测量工具" tabindex="-1">测量工具 <a class="header-anchor" href="#测量工具" aria-label="Permalink to &quot;测量工具&quot;">​</a></h3><blockquote><p>实测工具</p></blockquote><ul><li>web-vitals JavaScript 库</li><li>PageSpeed Insights 网页速度测量工具</li><li>Search Console</li></ul><blockquote><p>实验室工具</p></blockquote><ul><li>chrome 开发者工具</li><li>Lighthouse</li><li>PageSpeed Insights</li><li>WebPageTest</li></ul><h2 id="fp" tabindex="-1">FP <a class="header-anchor" href="#fp" aria-label="Permalink to &quot;FP&quot;">​</a></h2><p>First Paint</p><h2 id="fcp" tabindex="-1">FCP <a class="header-anchor" href="#fcp" aria-label="Permalink to &quot;FCP&quot;">​</a></h2><p>First Contentful Paint</p><h2 id="dcl" tabindex="-1">DCL <a class="header-anchor" href="#dcl" aria-label="Permalink to &quot;DCL&quot;">​</a></h2><p>DomContentLoaded</p><h2 id="fmp" tabindex="-1">FMP <a class="header-anchor" href="#fmp" aria-label="Permalink to &quot;FMP&quot;">​</a></h2><p>First Meaningful Paint</p><h2 id="l" tabindex="-1">L <a class="header-anchor" href="#l" aria-label="Permalink to &quot;L&quot;">​</a></h2><p>onLoad</p><h2 id="tti" tabindex="-1">TTI <a class="header-anchor" href="#tti" aria-label="Permalink to &quot;TTI&quot;">​</a></h2><p>Time to Interactive</p><h2 id="tbt" tabindex="-1">TBT <a class="header-anchor" href="#tbt" aria-label="Permalink to &quot;TBT&quot;">​</a></h2><p>Total Blocking Time</p><h2 id="fid" tabindex="-1">FID <a class="header-anchor" href="#fid" aria-label="Permalink to &quot;FID&quot;">​</a></h2><p>First Input Delay</p><h2 id="cls" tabindex="-1">CLS <a class="header-anchor" href="#cls" aria-label="Permalink to &quot;CLS&quot;">​</a></h2><p>Cumulative Layout Shift 累计布局偏移</p><h2 id="si" tabindex="-1">SI <a class="header-anchor" href="#si" aria-label="Permalink to &quot;SI&quot;">​</a></h2><p>Speed Index</p>`,40),o=[t];function p(r,i,c,h,d,u){return s(),l("div",null,o)}const b=a(n,[["render",p]]);export{E as __pageData,b as default};
