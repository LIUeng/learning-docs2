import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.7c0fadea.js";const p="/learning-docs2/assets/images/dom.png",o="/learning-docs2/assets/images/tblr.png",e="/learning-docs2/assets/images/clientBS.png",t="/learning-docs2/assets/images/scrollBS.png",D=JSON.parse('{"title":"DOM 类型","description":"","frontmatter":{},"headers":[],"relativePath":"notes/javascript/dom.md","filePath":"notes/javascript/dom.md","lastUpdated":1670379203000}'),c={name:"notes/javascript/dom.md"},r=l(`<h1 id="dom-类型" tabindex="-1">DOM 类型 <a class="header-anchor" href="#dom-类型" aria-label="Permalink to &quot;DOM 类型&quot;">​</a></h1><h2 id="dom-链" tabindex="-1">DOM 链 <a class="header-anchor" href="#dom-链" aria-label="Permalink to &quot;DOM 链&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">JS &amp; HTML</p><p>记录原生的 js 操作 dom 链</p></div><p><code>让我们从最熟悉的的 document 开始</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document</span></span>
<span class="line"><span style="color:#E1E4E8;">document.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> HTMLDocument </span><span style="color:#6A737D;">// type object</span></span>
<span class="line"><span style="color:#E1E4E8;">HTMLDocument.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Document </span><span style="color:#6A737D;">// type function =&gt; f Document({[native code]}) 源码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">Document</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">._proto__ </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Node </span><span style="color:#6A737D;">// type object</span></span>
<span class="line"><span style="color:#E1E4E8;">Node.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> EventTarget </span><span style="color:#6A737D;">// type function =&gt; f EventTarget({[native code]})</span></span>
<span class="line"><span style="color:#79B8FF;">EventTarget</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// type object =&gt; {addEventListener, removeEventListener, dispatchEvent}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> HTMLDocument </span><span style="color:#6A737D;">// type object</span></span>
<span class="line"><span style="color:#24292E;">HTMLDocument.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Document </span><span style="color:#6A737D;">// type function =&gt; f Document({[native code]}) 源码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">Document</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">._proto__ </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Node </span><span style="color:#6A737D;">// type object</span></span>
<span class="line"><span style="color:#24292E;">Node.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> EventTarget </span><span style="color:#6A737D;">// type function =&gt; f EventTarget({[native code]})</span></span>
<span class="line"><span style="color:#005CC5;">EventTarget</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// type object =&gt; {addEventListener, removeEventListener, dispatchEvent}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">document.documentElement</p><p>混杂模式</p><p>document.documentElement.**proto =&gt; HTMLHtmlElement.**proto =&gt; HTMLElement // 同下</p></div><p><code>来看看 document.head </code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.head</span></span>
<span class="line"><span style="color:#E1E4E8;">document.head.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> HTMLHeadElement.__proto </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> HTMLElement</span></span>
<span class="line"><span style="color:#6A737D;">// 同下</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.head</span></span>
<span class="line"><span style="color:#24292E;">document.head.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> HTMLHeadElement.__proto </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> HTMLElement</span></span>
<span class="line"><span style="color:#6A737D;">// 同下</span></span></code></pre></div><p><code>再来看看 document.body </code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.body</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> HTMLBodyElement </span><span style="color:#6A737D;">// type object</span></span>
<span class="line"><span style="color:#E1E4E8;">HTMLBodyElement.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> HTMLElement </span><span style="color:#6A737D;">// type (native code)</span></span>
<span class="line"><span style="color:#79B8FF;">HTMLElement</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Element </span><span style="color:#6A737D;">// type object</span></span>
<span class="line"><span style="color:#E1E4E8;">Element.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Node</span></span>
<span class="line"><span style="color:#6A737D;">// ... 同上</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.body</span></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> HTMLBodyElement </span><span style="color:#6A737D;">// type object</span></span>
<span class="line"><span style="color:#24292E;">HTMLBodyElement.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> HTMLElement </span><span style="color:#6A737D;">// type (native code)</span></span>
<span class="line"><span style="color:#005CC5;">HTMLElement</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Element </span><span style="color:#6A737D;">// type object</span></span>
<span class="line"><span style="color:#24292E;">Element.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Node</span></span>
<span class="line"><span style="color:#6A737D;">// ... 同上</span></span></code></pre></div><p><code>看完 body 再来看看一个具体的元素 div</code></p><div class="tip custom-block"><p class="custom-block-title">div</p><p>这里就拿 div 举例</p></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// html =&gt; &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">root.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> HTMLDivElement</span></span>
<span class="line"><span style="color:#E1E4E8;">root.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> HTMLElement</span></span>
<span class="line"><span style="color:#6A737D;">// ... 同上</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// html =&gt; &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">root.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> HTMLDivElement</span></span>
<span class="line"><span style="color:#24292E;">root.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> HTMLElement</span></span>
<span class="line"><span style="color:#6A737D;">// ... 同上</span></span></code></pre></div><h2 id="dom-操作" tabindex="-1">DOM 操作 <a class="header-anchor" href="#dom-操作" aria-label="Permalink to &quot;DOM 操作&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">NodeList NamedNodeMap HTMLCollection</p><p>有两个方法：item() nameItem()</p><p>文档结构发生变化时，它们会随时更新（减少访问的次数）</p></div><img src="`+p+`" alt="DOM图"><p><strong>DOM API</strong></p><ul><li><p>createElement</p></li><li><p>createTextNode <code>创建文本节点 normalize() 一个父元素下所有文本节点合并成一个节点</code></p></li><li><p>createComment <code>注释文本</code></p></li><li><p>createDocumentFragment <code>文档片段</code></p></li><li><p>appendChild</p></li><li><p>removeChild</p></li><li><p>replaceChild(target, source)</p></li><li><p>insertBefore(target, source)</p></li><li><p>cloneNode(bool) <code>true =&gt; 深复制 false =&gt; 浅复制</code></p></li><li><p>getAttribute</p></li><li><p>setAttribute <code>dataset 标准</code></p></li><li><p>removeAttribute</p></li><li><p>attributes[]</p></li><li><p>attr</p></li></ul><h2 id="dom-扩展" tabindex="-1">DOM 扩展 <a class="header-anchor" href="#dom-扩展" aria-label="Permalink to &quot;DOM 扩展&quot;">​</a></h2><ul><li><p>querySelector</p></li><li><p>querySelectorAll</p></li><li><p>matchesSelector</p></li><li><p>Element Traversal API 为 DOM 元素添加了以下 5 个属性。</p><ul><li> childElementCount:返回子元素(不包括文本节点和注释)的个数。</li><li> firstElementChild:指向第一个子元素;firstChild 的元素版。</li><li> lastElementChild:指向最后一个子元素;lastChild 的元素版。</li><li> previousElementSibling:指向前一个同辈元素;previousSibling 的元素版。</li><li> nextElementSibling:指向后一个同辈元素;nextSibling 的元素版。</li></ul></li><li><p>classList</p><ul><li>add</li><li>contains</li><li>remove</li><li>toggle</li></ul></li><li><p>自定义数据属性</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> div </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDiv&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//取得自定义属性的值</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> appId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> div.dataset.appId;</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> div.dataset.myname;</span></span>
<span class="line"><span style="color:#6A737D;">//设置值</span></span>
<span class="line"><span style="color:#E1E4E8;">div.dataset.appId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23456</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">div.dataset.myname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Michael&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> div </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myDiv&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//取得自定义属性的值</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> appId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> div.dataset.appId;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> myName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> div.dataset.myname;</span></span>
<span class="line"><span style="color:#6A737D;">//设置值</span></span>
<span class="line"><span style="color:#24292E;">div.dataset.appId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23456</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">div.dataset.myname </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Michael&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div></li><li><p>innerHTML <code>设置HTML字符串，无作用域的元素，并不是所有元素都支持innerHTML</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">div.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;script defer&gt;alert(&#39;hi&#39;);&lt;/script&gt;&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//无效</span></span>
<span class="line"><span style="color:#6A737D;">// 有效如下</span></span>
<span class="line"><span style="color:#E1E4E8;">div.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;_&lt;script defer&gt;alert(&#39;hi&#39;);&lt;/script&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">div.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;script defer&gt;alert(&#39;hi&#39;);&lt;/script&gt;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">div.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;input type=&quot;hidden&quot;&gt;&lt;script defer&gt;alert(</span><span style="color:#79B8FF;">\\&#39;</span><span style="color:#9ECBFF;">hi</span><span style="color:#79B8FF;">\\&#39;</span><span style="color:#9ECBFF;">);&lt;/script&gt;&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">div.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;script defer&gt;alert(&#39;hi&#39;);&lt;/script&gt;&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//无效</span></span>
<span class="line"><span style="color:#6A737D;">// 有效如下</span></span>
<span class="line"><span style="color:#24292E;">div.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;_&lt;script defer&gt;alert(&#39;hi&#39;);&lt;/script&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">div.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;script defer&gt;alert(&#39;hi&#39;);&lt;/script&gt;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">div.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;input type=&quot;hidden&quot;&gt;&lt;script defer&gt;alert(</span><span style="color:#005CC5;">\\&#39;</span><span style="color:#032F62;">hi</span><span style="color:#005CC5;">\\&#39;</span><span style="color:#032F62;">);&lt;/script&gt;&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div></li><li><p>outerHTML <code>包含自身</code></p></li><li><p>scrollIntoView() <code>document.forms[0].scrollIntoView();</code></p></li><li><p>scrollTo()</p></li><li><p>scrollBy()</p></li><li><p>children 属性 &amp;&amp; childNodes</p></li><li><p>contains <code>IE 某个节点是不是另一个节点的后代</code></p></li><li><p>innerText(textContent) &amp;&amp; outerText</p></li></ul><h2 id="dom2-dom3" tabindex="-1">DOM2 DOM3 <a class="header-anchor" href="#dom2-dom3" aria-label="Permalink to &quot;DOM2 DOM3&quot;">​</a></h2><ul><li>style <ul><li> cssText</li><li> length</li><li> item(index)</li><li> getPropertyCSSValue(propertyName):返回包含给定属性值的 CSSValue 对象(cssText 和 cssValueType)。</li><li> getPropertyValue(propertyName):返回给定属性的字符串值。</li><li> removeProperty(propertyName):从样式中删除给定属性。</li><li> setProperty(propertyName,value,priority):将给定属性设置为相应的值，并加上优先权标志(&quot;important&quot;或者一个空字符串)。</li><li>...</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//设置背景颜色 myDiv.style.backgroundColor = &quot;red&quot;;</span></span>
<span class="line"><span style="color:#6A737D;">//改变大小</span></span>
<span class="line"><span style="color:#E1E4E8;">myDiv.style.width </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;100px&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">myDiv.style.height </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;200px&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//指定边框</span></span>
<span class="line"><span style="color:#E1E4E8;">myDiv.style.border </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1px solid black&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">myDiv.style.cssText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;width: 25px; height: 100px; background-color: green&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(myDiv.style.cssText);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">myDiv.</span><span style="color:#B392F0;">getComputedStyle</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 返回所有的样式 行内样式 内联样式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//设置背景颜色 myDiv.style.backgroundColor = &quot;red&quot;;</span></span>
<span class="line"><span style="color:#6A737D;">//改变大小</span></span>
<span class="line"><span style="color:#24292E;">myDiv.style.width </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;100px&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">myDiv.style.height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;200px&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//指定边框</span></span>
<span class="line"><span style="color:#24292E;">myDiv.style.border </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1px solid black&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">myDiv.style.cssText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;width: 25px; height: 100px; background-color: green&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(myDiv.style.cssText);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">myDiv.</span><span style="color:#6F42C1;">getComputedStyle</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 返回所有的样式 行内样式 内联样式</span></span></code></pre></div><p><strong>元素大小</strong></p><ul><li>偏移量 <ul><li> offsetHeight:元素在垂直方向上占用的空间大小，以像素计。包括元素的高度、(可见的) 水平滚动条的高度、上边框高度和下边框高度。</li><li> offsetWidth:元素在水平方向上占用的空间大小，以像素计。包括元素的宽度、(可见的)垂 直滚动条的宽度、左边框宽度和右边框宽度。</li><li> offsetLeft:元素的左外边框至包含元素的左内边框之间的像素距离。</li><li> offsetTop:元素的上外边框至包含元素的上内边框之间的像素距离。</li></ul></li></ul><img src="`+o+'" alt="偏移量图"><ul><li>客户区大小</li></ul><img src="'+e+'" alt="客户区大小图"><ul><li>滚动大小 <ul><li> scrollHeight:在没有滚动条的情况下，元素内容的总高度。</li><li> scrollWidth:在没有滚动条的情况下，元素内容的总宽度。</li><li> scrollLeft:被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置。</li><li> scrollTop:被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置。</li></ul></li></ul><img src="'+t+`" alt="滚动大小图"><div class="warning custom-block"><p class="custom-block-title">混杂模式</p><p>对于运行在混杂模式下的 IE，则需要用 document.body 代替 document.documentElement</p></div><ul><li><p>确定元素大小 <code>getBoundingClientRect()</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBoundingClientRect</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.callee.offset </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> scrollTop </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.documentElement.scrollTop;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> temp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    temp.style.cssText </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;position:absolute;left:0;top:0;&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(temp);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.callee.offset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">temp.</span><span style="color:#B392F0;">getBoundingClientRect</span><span style="color:#E1E4E8;">().top </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> scrollTop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    document.body.</span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(temp);</span></span>
<span class="line"><span style="color:#E1E4E8;">    temp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element.</span><span style="color:#B392F0;">getBoundingClientRect</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> offset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">.callee.offset;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    left: rect.left </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> offset,</span></span>
<span class="line"><span style="color:#E1E4E8;">    right: rect.right </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> offset,</span></span>
<span class="line"><span style="color:#E1E4E8;">    top: rect.top </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> offset,</span></span>
<span class="line"><span style="color:#E1E4E8;">    bottom: rect.bottom </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> offset,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">(</span><span style="color:#E36209;">element</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.callee.offset </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;number&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> scrollTop </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.documentElement.scrollTop;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    temp.style.cssText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;position:absolute;left:0;top:0;&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(temp);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.callee.offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">temp.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">().top </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> scrollTop;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    document.body.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(temp);</span></span>
<span class="line"><span style="color:#24292E;">    temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element.</span><span style="color:#6F42C1;">getBoundingClientRect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">.callee.offset;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    left: rect.left </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> offset,</span></span>
<span class="line"><span style="color:#24292E;">    right: rect.right </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> offset,</span></span>
<span class="line"><span style="color:#24292E;">    top: rect.top </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> offset,</span></span>
<span class="line"><span style="color:#24292E;">    bottom: rect.bottom </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> offset,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><p><strong>表单脚本</strong></p><ul><li>HTMLFormElement <ul><li> acceptCharset:服务器能够处理的字符集;等价于 HTML 中的 accept-charset 特性。</li><li> action:接受请求的 URL;等价于 HTML 中的 action 特性。</li><li> elements:表单中所有控件的集合(HTMLCollection)。</li><li> enctype:请求的编码类型;等价于 HTML 中的 enctype 特性。</li><li> length:表单中控件的数量。</li><li> method:要发送的 HTTP 请求类型，通常是&quot;get&quot;或&quot;post&quot;;等价于 HTML 的 method 特性。</li><li> name:表单的名称;等价于 HTML 的 name 特性。</li><li> reset():将所有表单域重置为默认值。</li><li> submit():提交表单。</li><li> target:用于发送请求和接收响应的窗口名称;等价于 HTML 的 target 特性。</li></ul></li></ul><p><strong>选择框脚本</strong></p><ul><li><p>HTMLSelectElement</p><ul><li>add(newOption, relOption)</li><li>multiple</li><li>options</li><li>remove(index)</li><li>selectedIndex</li><li>size</li></ul></li><li><p>HTMLOptionElement</p><ul><li>index</li><li>label</li><li>selected</li><li>text</li><li>value</li></ul></li></ul><p><strong>扩展</strong></p><ul><li>操作剪贴板 <ul><li> beforecopy:在发生复制操作前触发。</li><li> copy:在发生复制操作时触发。</li><li> beforecut:在发生剪切操作前触发。</li><li> cut:在发生剪切操作时触发。</li><li> beforepaste:在发生粘贴操作前触发。</li><li> paste:在发生粘贴操作时触发。<div class="tip custom-block"><p class="custom-block-title">clipboardData</p><p>事件对象中（IE 是 window 对象的属性），getData()，setData()，clearData() =&gt; 两种数据格式 text 和 URL</p></div></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> EventUtil </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getClipboardText</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> clipboardData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.clipboardData </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> window.clipboardData;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> clipboardData.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;text&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setClipboardText</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (event.clipboardData) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> event.clipboardData.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;text/plain&#39;</span><span style="color:#E1E4E8;">, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (window.clipboardData) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> window.clipboardData.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;text&#39;</span><span style="color:#E1E4E8;">, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> EventUtil </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getClipboardText</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> clipboardData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.clipboardData </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> window.clipboardData;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> clipboardData.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;text&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setClipboardText</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (event.clipboardData) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> event.clipboardData.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;text/plain&#39;</span><span style="color:#24292E;">, value);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (window.clipboardData) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> window.clipboardData.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;text&#39;</span><span style="color:#24292E;">, value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></li></ul>`,38),E=[r];function i(y,d,u,m,g,F){return n(),a("div",null,E)}const h=s(c,[["render",i]]);export{D as __pageData,h as default};
