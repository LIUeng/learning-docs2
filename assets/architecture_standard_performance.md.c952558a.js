import{_ as a,o as l,c as i,Q as e}from"./chunks/framework.7c0fadea.js";const _=JSON.parse('{"title":"前端性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/standard/performance.md","filePath":"architecture/standard/performance.md","lastUpdated":1670330848000}'),r={name:"architecture/standard/performance.md"},t=e('<h1 id="前端性能优化" tabindex="-1">前端性能优化 <a class="header-anchor" href="#前端性能优化" aria-label="Permalink to &quot;前端性能优化&quot;">​</a></h1><p>时间和空间</p><div class="warning custom-block"><p class="custom-block-title">性能分析指标</p><p><code>加载耗时、渲染耗时、网络耗时、脚本执行耗时</code> &amp; <code>CPU 占用、资源占用、本地缓存占用</code></p></div><h2 id="时间角度" tabindex="-1">时间角度 <a class="header-anchor" href="#时间角度" aria-label="Permalink to &quot;时间角度&quot;">​</a></h2><p>减少耗时</p><h3 id="网络请求优化" tabindex="-1">网络请求优化 <a class="header-anchor" href="#网络请求优化" aria-label="Permalink to &quot;网络请求优化&quot;">​</a></h3><ul><li>减少 DNS 查询时间，使用浏览器 DNS 缓存、计算机 DNS 缓存、服务器 DNS 缓存</li><li>合理地使用 CDN，有效的减少网络请求耗时</li><li>对请求资源进行缓存（浏览器缓存、HTTP 缓存、后台缓存）Service Worker、PWA 技术</li><li>Tree-shaking 代码分割</li><li>对请求资源进行合理的拆分，减少请求资源的体积</li><li>对资源进行压缩，减少传输数据大小</li><li>使用 HTTP2、HTTP3 提升资源请求速度</li><li>对请求进行优化（多个请求合并，减少通信次数；请求进行域名拆分，提升并发请求数量）</li></ul><h3 id="首屏加载优化" tabindex="-1">首屏加载优化 <a class="header-anchor" href="#首屏加载优化" aria-label="Permalink to &quot;首屏加载优化&quot;">​</a></h3><p>将页面尽快展示给用户看，减少白屏时间</p><ul><li>对页面进行分片/分屏加载，将页面可见/可交互时间提前</li><li>优化资源加载的顺序和粒度，仅加载需要的资源，采用异步加载的方式加载其他资源</li><li>按需加载（差异化服务，读写分离）</li><li>使用服务端渲染，减少页面二次请求和渲染的耗时</li><li>使用秒看技术，通过预览的方式提前给用户观看（图片）</li><li>配合客户端进行资源预请求和预加载（预热 Web 容器）</li><li>配合客户端将资源和数据进行离线，可用于下一次的页面快速渲染</li></ul><h3 id="渲染过程优化" tabindex="-1">渲染过程优化 <a class="header-anchor" href="#渲染过程优化" aria-label="Permalink to &quot;渲染过程优化&quot;">​</a></h3><ul><li>使用资源预加载，空闲时间将用户可能需要用到的资源进行获取并加载</li><li>减少 DOM 数量、减少/合并 DOM 操作，减少浏览器渲染过程中的计算耗时</li><li>通过合理使用浏览器 GPU 进程合成，提升浏览器渲染效率</li><li>使用离屏渲染，在页面不可见的地方进行提前渲染（Canvas 渲染）</li><li>通过将浏览帧率保持在 60FPS，提升页面交互和渲染的流畅度</li></ul><h3 id="计算-逻辑提速" tabindex="-1">计算/逻辑提速 <a class="header-anchor" href="#计算-逻辑提速" aria-label="Permalink to &quot;计算/逻辑提速&quot;">​</a></h3><ul><li>将 JavaScript 大任务拆解 + 并行计算的方式，有效的降低整体计算耗时（Web Worker)</li><li>使用更高运行效率的方式，减少计算耗时（Webassembly）</li><li>将计算过程提前，减少计算等待时长（AOT 技术）</li><li>使用更优的算法或数据结构，提升计算效率（红黑树）</li><li>将结果缓存，减少运行次数</li></ul><h2 id="空间角度" tabindex="-1">空间角度 <a class="header-anchor" href="#空间角度" aria-label="Permalink to &quot;空间角度&quot;">​</a></h2><h3 id="降低资源占用" tabindex="-1">降低资源占用 <a class="header-anchor" href="#降低资源占用" aria-label="Permalink to &quot;降低资源占用&quot;">​</a></h3><ul><li>合理使用缓存，不滥用用户的缓存资源（浏览器缓存，IndexDB）及时进行缓存清理</li><li>通过使用数据结构享元的方式，减少对象的创建，从而减少内存占用</li><li>避免存在内存泄漏（避免全局变量的使用，及时解除引用）</li><li>避免复杂/异常的递归调用，防止栈溢出</li></ul><h2 id="性能数据" tabindex="-1">性能数据 <a class="header-anchor" href="#性能数据" aria-label="Permalink to &quot;性能数据&quot;">​</a></h2><ul><li>网络资源请求时间。</li><li>Time To Start Render(TTSR)：浏览器开始渲染的时间。</li><li>Dom Ready：页面解析完成的时间。</li><li>Time To Interact(TTI))：页面可交互时间。</li><li>Total Blocking Time (TBT)：总阻塞时间，代表页面处于不可交互状态的耗时。</li><li>First Input Delay(FID)：从用户首次交互，到浏览器响应的时间。</li></ul>',19),o=[t];function c(n,d,h,s,u,m){return l(),i("div",null,o)}const T=a(r,[["render",c]]);export{_ as __pageData,T as default};
