import{_ as t,o as a,c as e,Q as d}from"./chunks/framework.7c0fadea.js";const P=JSON.parse('{"title":"HTTP 请求方法","description":"","frontmatter":{},"headers":[],"relativePath":"network/methods.md","filePath":"network/methods.md","lastUpdated":1670330848000}'),r={name:"network/methods.md"},o=d('<h1 id="http-请求方法" tabindex="-1">HTTP 请求方法 <a class="header-anchor" href="#http-请求方法" aria-label="Permalink to &quot;HTTP 请求方法&quot;">​</a></h1><p><a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods" target="_blank" rel="noreferrer">Wiki - HyperText Transfer Protocol</a></p><p>9 种方法</p><h2 id="get" tabindex="-1">GET <a class="header-anchor" href="#get" aria-label="Permalink to &quot;GET&quot;">​</a></h2><p>向指定的资源发起请求</p><h2 id="head" tabindex="-1">HEAD <a class="header-anchor" href="#head" aria-label="Permalink to &quot;HEAD&quot;">​</a></h2><p>和 GET 一样，向服务器发出指定资源的请求，但是没有响应头</p><h2 id="post" tabindex="-1">POST <a class="header-anchor" href="#post" aria-label="Permalink to &quot;POST&quot;">​</a></h2><p>向指定资源提交数据，请求服务器进行处理（提交表单或者上传文件），可能会创建新的资源或者修改资源，或二者都可</p><h3 id="请求-body-格式" tabindex="-1">请求 body 格式 <a class="header-anchor" href="#请求-body-格式" aria-label="Permalink to &quot;请求 body 格式&quot;">​</a></h3><ul><li>application/x-www-form-urlencoded</li><li>application/json</li><li>multipart/form-data</li></ul><h2 id="put" tabindex="-1">PUT <a class="header-anchor" href="#put" aria-label="Permalink to &quot;PUT&quot;">​</a></h2><p>向指定资源位置上传其最新内容（资源已创建，直接修改）</p><h2 id="delete" tabindex="-1">DELETE <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;DELETE&quot;">​</a></h2><p>请求服务删除 Request-URI 所标识的资源</p><h2 id="trace" tabindex="-1">TRACE <a class="header-anchor" href="#trace" aria-label="Permalink to &quot;TRACE&quot;">​</a></h2><p>回显服务器收到的请求，用于测试或诊断（请求目标资源在响应正文中传输收到的请求）</p><h2 id="options" tabindex="-1">OPTIONS <a class="header-anchor" href="#options" aria-label="Permalink to &quot;OPTIONS&quot;">​</a></h2><p>向服务器发出预请求，判断服务器是否支持该请求方法以及响应</p><h2 id="connect" tabindex="-1">CONNECT <a class="header-anchor" href="#connect" aria-label="Permalink to &quot;CONNECT&quot;">​</a></h2><ul><li>HTTP1.1 预留给能够将连接改为隧道方式的代理服务器（通常用于 SSL 加密服务器的链接）</li><li>请求中介建立到请求目标表示的源服务器的 TCP/IP 隧道（一个或多个带有 TLS 的 HTTP 代理来保护连接）</li></ul><h2 id="patch" tabindex="-1">PATCH <a class="header-anchor" href="#patch" aria-label="Permalink to &quot;PATCH&quot;">​</a></h2><p>请求目标资源根据请求中包含的表示中定义的部分更新来修改其状态（更新文件或文档的一部分来节省带宽，而不必完全传输）</p><h2 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比&quot;">​</a></h2><table><thead><tr><th>请求方法</th><th>request(请求体)</th><th>response(响应头)</th><th>safe(安全)</th><th>indempotent(幂等)</th><th>cachcable(缓存)</th></tr></thead><tbody><tr><td>GET</td><td>optional</td><td>yes</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>POST</td><td>yes</td><td>yes</td><td><i class="warn">no</i></td><td><i class="warn">no</i></td><td>yes</td></tr><tr><td>HEAD</td><td>optional</td><td><i class="warn">no</i></td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>PUT</td><td>yes</td><td>yes</td><td><i class="warn">no</i></td><td>yes</td><td><i class="warn">no</i></td></tr><tr><td>DELETE</td><td>optional</td><td>yes</td><td><i class="warn">no</i></td><td>yes</td><td><i class="warn"></i></td></tr><tr><td>TRACE</td><td><i class="warn">no</i></td><td>yes</td><td>yes</td><td>yes</td><td><i class="warn">no</i></td></tr><tr><td>CONNECT</td><td>optional</td><td>yes</td><td>yes</td><td><i class="warn">no</i></td><td><i class="warn">no</i></td></tr><tr><td>OPTIONS</td><td>optional</td><td>yes</td><td>yes</td><td>yes</td><td><i class="warn">no</i></td></tr><tr><td>PATCH</td><td>yes</td><td>yes</td><td><i class="warn">no</i></td><td><i class="warn">no</i></td><td><i class="warn">no</i></td></tr></tbody></table><blockquote><p>总结</p></blockquote><ul><li>POST PUT PATCH 需要请求体(request)，其他请求方法可选</li><li>响应体(response)只有 HEAD 不返回，其他请求方法都可以有响应体</li><li>POST PUT PATCH 涉及到资源的修改和创建都是不安全的，其他请求方法相对安全</li><li>POST CONNCET PATCH 都不是幂等(idempotent)(请求多次，输出的结果都是一样的)，具有副作用</li><li>GET POST HEAD 三种方法可以缓存，其他方法不可缓存</li></ul>',27),i=[o];function s(l,n,h,c,p,T){return a(),e("div",null,i)}const _=t(r,[["render",s]]);export{P as __pageData,_ as default};
