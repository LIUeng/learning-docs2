import{_ as e,o as l,c as t,Q as a}from"./chunks/framework.7c0fadea.js";const _=JSON.parse('{"title":"可替换元素","description":"","frontmatter":{},"headers":[],"relativePath":"notes/css/replaced.md","filePath":"notes/css/replaced.md","lastUpdated":1670330848000}'),i={name:"notes/css/replaced.md"},o=a('<h1 id="可替换元素" tabindex="-1">可替换元素 <a class="header-anchor" href="#可替换元素" aria-label="Permalink to &quot;可替换元素&quot;">​</a></h1><p>replaced element / none-replaced element</p><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><ul><li>在 CSS 中，替换元素是表示形式超出 CSS 范围的元素，他们是外部对象，独立于 CSS 格式模型</li><li>CSS 可影响可替换元素的位置，不会影响到可替换元素自身的内容</li><li>某些替换元素具有固有尺寸或定义的基线，只有可替换的元素才能具有固有尺寸</li></ul><h2 id="替换元素" tabindex="-1">替换元素 <a class="header-anchor" href="#替换元素" aria-label="Permalink to &quot;替换元素&quot;">​</a></h2><ul><li>iframe</li><li>video</li><li>embed</li><li>img</li></ul><p>某些特殊情况下，以下元素也可以是替换元素</p><ul><li>opiton</li><li>audio</li><li>canvas</li><li>object</li><li>applet</li><li>input type=image</li></ul><h2 id="content-属性" tabindex="-1">content 属性 <a class="header-anchor" href="#content-属性" aria-label="Permalink to &quot;content 属性&quot;">​</a></h2><blockquote><p>content 属性应用在元素的 ::before 和 ::after 伪元素中插入内容</p></blockquote><h3 id="取值" tabindex="-1">取值 <a class="header-anchor" href="#取值" aria-label="Permalink to &quot;取值&quot;">​</a></h3><ul><li>normal 默认值</li><li>none 不产生伪类元素</li><li>string 文本内容</li><li>url</li><li>counter/counters 计数/嵌套计数</li><li>attr 显示元素属性内容</li><li>open-quote close-quote 增加去除引号</li><li>no-open-quote no-close-quote 不产生任何内容（会改变引号层级）</li></ul><h3 id="counter-counters" tabindex="-1">counter/counters <a class="header-anchor" href="#counter-counters" aria-label="Permalink to &quot;counter/counters&quot;">​</a></h3><blockquote><p>嵌套计数器，返回表示指定计数器当前值的拼接字符串</p></blockquote><ul><li>两种形式 <ul><li>counters(name, string)</li><li>counters(name, string, style)</li></ul></li><li>通常与伪元素搭配使用 content 属性，理论上支持属性值为 string 的任何地方</li><li>生成的文本是具有给定名称的所有计数器的值，从最外层到最内层，之间由指定字符串分隔</li><li>style 默认为十进制（upper-roman, lower-roman, decimal-leading-zero, lower-alpha)</li></ul><h2 id="list-style-属性" tabindex="-1">list-style 属性 <a class="header-anchor" href="#list-style-属性" aria-label="Permalink to &quot;list-style 属性&quot;">​</a></h2><blockquote><p>symbols 函数</p></blockquote>',17),n=[o];function r(c,s,u,d,h,p){return l(),t("div",null,n)}const b=e(i,[["render",r]]);export{_ as __pageData,b as default};
