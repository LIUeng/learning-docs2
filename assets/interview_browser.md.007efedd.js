import{_ as i,o as a,c as e,Q as l}from"./chunks/framework.7c0fadea.js";const t="/learning-docs2/assets/images/rendering-pipeline.webp",q=JSON.parse('{"title":"Chromium 渲染流水线","description":"","frontmatter":{},"headers":[],"relativePath":"interview/browser.md","filePath":"interview/browser.md","lastUpdated":1671437626000}'),r={name:"interview/browser.md"},o=l('<h1 id="chromium-渲染流水线" tabindex="-1">Chromium 渲染流水线 <a class="header-anchor" href="#chromium-渲染流水线" aria-label="Permalink to &quot;Chromium 渲染流水线&quot;">​</a></h1><p><a href="https://zhuanlan.zhihu.com/p/574069391" target="_blank" rel="noreferrer">本文引用地址</a></p><h2 id="浏览器架构" tabindex="-1">浏览器架构 <a class="header-anchor" href="#浏览器架构" aria-label="Permalink to &quot;浏览器架构&quot;">​</a></h2><blockquote><p>浏览器 = 浏览器内核 + 服务</p></blockquote><ul><li>Safari = WebKit + 其他组件、库、服务</li><li>Chrome = Chromium + Google 服务集成</li><li>Microsoft Edge (Chromium) = Chromium + Microsoft 服务集成</li><li>Yandex Browser = Chromium + Yandex 服务集成</li><li>360 安全浏览器 = Trident + Chromium + 360 服务集成</li><li>Chromium = Blink + V8 + 其他组件、库、服务</li></ul><blockquote><p>浏览器 = 渲染引擎 + JavaScript 引擎 + 其他</p></blockquote><table><thead><tr><th>Browser</th><th>Rendering Engine</th><th>JavaScript Engine</th></tr></thead><tbody><tr><td>Internet</td><td>Explorer Trident (MSHTML)</td><td>JScript/Chakra</td></tr><tr><td>Microsoft Edge</td><td>EdgeHTML → Blink</td><td>Chakra → V8</td></tr><tr><td>Firefox</td><td>Gecko</td><td>SpiderMonkey</td></tr><tr><td>Safari</td><td>KHTML → WebKit</td><td>JavaScriptCore</td></tr><tr><td>Chrome</td><td>WebKit → Blink</td><td>V8</td></tr><tr><td>Opera</td><td>Presto → WebKit → Blink Carakan →</td><td>V8</td></tr></tbody></table><h2 id="chromium-进程" tabindex="-1">Chromium 进程 <a class="header-anchor" href="#chromium-进程" aria-label="Permalink to &quot;Chromium 进程&quot;">​</a></h2><ul><li>浏览器进程 1 个</li><li>Utility 进程 1 个</li><li>Viz 进程 1 个（Visuals Process）</li><li>插件进程 1 个</li><li>渲染进程 多个</li></ul><h3 id="浏览器进程" tabindex="-1">浏览器进程 <a class="header-anchor" href="#浏览器进程" aria-label="Permalink to &quot;浏览器进程&quot;">​</a></h3><blockquote><p>负责 Browser UI （不包含 WebContent 的 UI）的全部能力，包括渲染、动画、路由、Input 事件等</p></blockquote><ul><li>Render &amp; Compositing Thread</li><li>Render &amp; Compositing Thread Helpers</li></ul><h3 id="渲染进程" tabindex="-1">渲染进程 <a class="header-anchor" href="#渲染进程" aria-label="Permalink to &quot;渲染进程&quot;">​</a></h3><blockquote><p>负责单个 Tab 内单个站点（注意跨站点 iframe 的情况）的渲染、动画、滚动、Input 事件等</p></blockquote><ul><li>线程 <ul><li>主线程</li><li>合成线程（compositor）</li><li>光栅化线程</li><li>worker 线程</li></ul></li></ul><h4 id="主线程" tabindex="-1">主线程 <a class="header-anchor" href="#主线程" aria-label="Permalink to &quot;主线程&quot;">​</a></h4><ul><li>执行 JavaScript</li><li>Event Loop</li><li>Document 生命周期</li><li>Hit Testing</li><li>事件调度</li><li>HTML CSS 数据格式的解析</li></ul><h4 id="合成线程" tabindex="-1">合成线程 <a class="header-anchor" href="#合成线程" aria-label="Permalink to &quot;合成线程&quot;">​</a></h4><ul><li>Input Handler &amp; Hit Tester</li><li>Web Content 中的滚动与动画</li><li>计算 Web Content 的最优分层</li><li>协调图片解码、绘制、光栅化任务（helpers)</li></ul><h3 id="viz-进程" tabindex="-1">Viz 进程 <a class="header-anchor" href="#viz-进程" aria-label="Permalink to &quot;Viz 进程&quot;">​</a></h3><blockquote><p>接受 Render Process 和 Browser Process 产生的 viz::CompositorFrame，并将其合成 (Aggregate)，最后使用 GPU 将合成结果上屏 (Display)</p></blockquote><ul><li>GPU main thread</li><li>Display Compositor Thread</li></ul><h2 id="进程模式" tabindex="-1">进程模式 <a class="header-anchor" href="#进程模式" aria-label="Permalink to &quot;进程模式&quot;">​</a></h2><ul><li>Process-per-site-instance：老版本的默认策略，如果从一个页面打开了另一个新页面，而新页面和当前页面属于同一站点（根域名与协议相同）的话，那么这两个页面会共用一个 Render Process</li><li>Process-per-site</li><li>Process-per-tab：如今版本的默认策略，每个 Tab 起一个 Render Process。但注意站点内部的跨站 iframe 也会启动一个新的 Render Process</li><li>Single Process：单进程模式，启动参数可控，用于 Debug</li></ul><h2 id="渲染流水线" tabindex="-1">渲染流水线 <a class="header-anchor" href="#渲染流水线" aria-label="Permalink to &quot;渲染流水线&quot;">​</a></h2><img src="'+t+'"><h3 id="parsing" tabindex="-1">Parsing <a class="header-anchor" href="#parsing" aria-label="Permalink to &quot;Parsing&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：主线程</li><li>职责：解析浏览器进程传送的字节，转成 DOM TREE</li><li>流程：bytes → characters → token → nodes → object model (DOM Tree)</li></ul><h3 id="style" tabindex="-1">Style <a class="header-anchor" href="#style" aria-label="Permalink to &quot;Style&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：主线程</li><li>职责：遍历 DOM TREE，通过 CSSOM 进行样式分析（ComputeStyle 样式信息）和样式重算，生成 Render Tree</li></ul><h3 id="layout" tabindex="-1">Layout <a class="header-anchor" href="#layout" aria-label="Permalink to &quot;Layout&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：主线程</li><li>职责：处理元素的几何属性，即位置与尺寸</li></ul><h3 id="pre-paint" tabindex="-1">Pre-paint <a class="header-anchor" href="#pre-paint" aria-label="Permalink to &quot;Pre-paint&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：主线程</li><li>职责：生成 Property trees（transform clip effect scroll），供 Compositor thrread 使用，避免某些资源重复 Raster</li></ul><h3 id="paint" tabindex="-1">Paint <a class="header-anchor" href="#paint" aria-label="Permalink to &quot;Paint&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：主线程</li><li>职责：开始绘制</li></ul><h3 id="commit" tabindex="-1">Commit <a class="header-anchor" href="#commit" aria-label="Permalink to &quot;Commit&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：合成（Compositor）线程</li><li>职责：将绘制的产物数据提交给 Compositor 线程</li></ul><h3 id="compositing" tabindex="-1">Compositing <a class="header-anchor" href="#compositing" aria-label="Permalink to &quot;Compositing&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：合成（Compositor）线程</li><li>职责：将整个页面按照一定规则，分成多个独立的图层，便于隔离更新</li></ul><h3 id="tiling" tabindex="-1">Tiling <a class="header-anchor" href="#tiling" aria-label="Permalink to &quot;Tiling&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：合成（Compositor）线程</li><li>职责：根据图层不同的范围级别，不同的大小拆分成多个图块给到 Raster 线程处理</li></ul><h3 id="raster" tabindex="-1">Raster <a class="header-anchor" href="#raster" aria-label="Permalink to &quot;Raster&quot;">​</a></h3><p>::: tips 光栅化 光栅化（Rasterization）是把顶点数据转换为片元的过程，具有将图转化为一个个栅格组成的图象的作用，特点是每个元素对应帧缓冲区中的一像素。 :::</p><ul><li>进程：渲染进程</li><li>线程：Raster 线程</li><li>职责：生成位图</li></ul><h3 id="activate" tabindex="-1">Activate <a class="header-anchor" href="#activate" aria-label="Permalink to &quot;Activate&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：合成（Compositor）线程</li><li>职责：实现一个缓冲机制，确保 Draw 阶段操作前 Raster 的数据已经准备好</li></ul><h3 id="draw" tabindex="-1">Draw <a class="header-anchor" href="#draw" aria-label="Permalink to &quot;Draw&quot;">​</a></h3><ul><li>进程：渲染进程</li><li>线程：合成（Compositor）线程</li><li>职责：将光栅化之后的图块生成 draw quads 的过程</li></ul><h3 id="aggregate" tabindex="-1">Aggregate <a class="header-anchor" href="#aggregate" aria-label="Permalink to &quot;Aggregate&quot;">​</a></h3><ul><li>进程：Viz 进程</li><li>线程：Display Compositor thread</li><li>职责：接受多个进程传递过来的（CompositorFrame）并进行合成</li></ul><h3 id="display" tabindex="-1">Display <a class="header-anchor" href="#display" aria-label="Permalink to &quot;Display&quot;">​</a></h3><ul><li>进程：Viz 进程</li><li>线程：GUP 主线程</li><li>职责：生成 CompositorFrame 之后，调用 GL 指令把 draw quads 最终输出到屏幕上</li></ul>',53),n=[o];function s(h,d,u,c,m,p){return a(),e("div",null,n)}const P=i(r,[["render",s]]);export{q as __pageData,P as default};
