import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.0e8ae64e.js";const u=JSON.parse('{"title":"ES6","description":"","frontmatter":{},"headers":[],"relativePath":"notes/es/es6.md","filePath":"notes/es/es6.md","lastUpdated":1670330848000}'),p={name:"notes/es/es6.md"},o=l(`<h1 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;ES6&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">注意</p><p>记录一些之前没有注意的地方</p></div><h2 id="let-const" tabindex="-1">let &amp; const <a class="header-anchor" href="#let-const" aria-label="Permalink to &quot;let &amp; const&quot;">​</a></h2><p><strong>1. 暂时行死区</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> x;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x;</span></span></code></pre></div><h2 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-label="Permalink to &quot;解构赋值&quot;">​</a></h2><p><strong>1. 数组结构赋值</strong></p><p><code>如果等号左边不是可遍历对象，报错！需要Iterator对象</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> [foo] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, flase, NaN, undefined, null, {};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 报错</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [foo] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, flase, NaN, undefined, null, {};</span></span></code></pre></div><p><code>对象和数组结构赋值，默认值生效的条件，属性值严格等于 &#39;undefined&#39;</code></p><p><strong>2. 对象结构赋值</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 函数参数默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">{ a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 函数参数默认值</span></span>
<span class="line"><span style="color:#24292E;">{ a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span></code></pre></div><h2 id="正则的扩展" tabindex="-1">正则的扩展 <a class="header-anchor" href="#正则的扩展" aria-label="Permalink to &quot;正则的扩展&quot;">​</a></h2><h3 id="match-exec-matchall" tabindex="-1">match &amp;&amp; exec &amp;&amp; matchAll <a class="header-anchor" href="#match-exec-matchall" aria-label="Permalink to &quot;match &amp;&amp; exec &amp;&amp; matchAll&quot;">​</a></h3><p><code>match 返回所有匹配的结果数组, 不包括位置信息; exec 返回当前匹配的数组, 继续匹配位置; matchAll 一次性匹配所有结果, 包括位置信息</code></p><ul><li>新增方法 <ul><li>RegExp.prototype.flags 返回正则表达式的修饰符</li><li>...</li></ul></li></ul><p><strong>1. u（unicode）修饰符</strong></p><p><code>大于0xFFFF的unicode字符码</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\u</span><span style="color:#DBEDFF;">{20BB7}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;𠮷&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6A737D;">// RegExp.prototype.unicode 属性</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">r1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">hello</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">r2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">hello</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">r1.unicode; </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">r2.unicode; </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/</span><span style="color:#22863A;font-weight:bold;">\\u</span><span style="color:#032F62;">{20BB7}/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;𠮷&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#6A737D;">// RegExp.prototype.unicode 属性</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">r1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /hello/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">r2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /hello/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">r1.unicode; </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">r2.unicode; </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>2. sticky 修饰符（y)</strong></p><ul><li><p>g 匹配模式对比</p><ul><li><ol><li>开头^自带（头部开始）</li></ol></li><li><ol start="2"><li>从匹配的第一个位置再进行匹配</li></ol></li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// RegExp.prototype.sticky 属性</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">hello</span><span style="color:#79B8FF;">\\d</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">y</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">r.sticky; </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// RegExp.prototype.sticky 属性</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /hello</span><span style="color:#005CC5;">\\d</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">y</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">r.sticky; </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>3. dotAll</strong></p><p><code>针对 \\. 不匹配换行符\\n</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// one</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">foo</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">]</span><span style="color:#DBEDFF;">bar</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">bar&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// two</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo.bar </span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">  s.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">bar&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// one</span></span>
<span class="line"><span style="color:#032F62;">/foo</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">]</span><span style="color:#032F62;">bar/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">bar&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// two</span></span>
<span class="line"><span style="color:#24292E;">  foo.bar </span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">  s.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">bar&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>4. 后行断言</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 前行断言</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">(?=%)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;100% of US presidents have been male&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// [&quot;100&quot;]</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">(?!%)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;that’s all 44 of them&#39;</span><span style="color:#E1E4E8;">)                 </span><span style="color:#6A737D;">// [&quot;44&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 前行断言</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(?=%)/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;100% of US presidents have been male&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// [&quot;100&quot;]</span></span>
<span class="line"><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(?!%)/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;that’s all 44 of them&#39;</span><span style="color:#24292E;">)                 </span><span style="color:#6A737D;">// [&quot;44&quot;]</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 后行断言</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;=</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">)</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Benjamin Franklin is on the $100 bill&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// [&quot;100&quot;]</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;!</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">)</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;it’s is worth about €90&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ⚠️反斜杠与通常的顺序相反</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;=(o)d</span><span style="color:#F97583;">\\1</span><span style="color:#DBEDFF;">)r</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hodor&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;=</span><span style="color:#F97583;">\\1</span><span style="color:#DBEDFF;">d(o))r</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hodor&#39;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// [&quot;r&quot;, &quot;o&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 后行断言</span></span>
<span class="line"><span style="color:#032F62;">/(?&lt;=</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Benjamin Franklin is on the $100 bill&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// [&quot;100&quot;]</span></span>
<span class="line"><span style="color:#032F62;">/(?&lt;!</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;it’s is worth about €90&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ⚠️反斜杠与通常的顺序相反</span></span>
<span class="line"><span style="color:#032F62;">/(?&lt;=(o)d</span><span style="color:#D73A49;">\\1</span><span style="color:#032F62;">)r/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hodor&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#032F62;">/(?&lt;=</span><span style="color:#D73A49;">\\1</span><span style="color:#032F62;">d(o))r/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hodor&#39;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;">// [&quot;r&quot;, &quot;o&quot;]</span></span></code></pre></div><p><strong>5. Unicode 属性类</strong></p><p><code>\\p</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">regexGreekSymbol</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\p</span><span style="color:#DBEDFF;">{Script=Greek}</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">regexGreekSymbol.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;π&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">regexGreekSymbol</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\p</span><span style="color:#032F62;">{Script=Greek}/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">regexGreekSymbol.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;π&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p><strong>6. 具名组匹配</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> re </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;</span><span style="color:#E1E4E8;">year</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{4}</span><span style="color:#DBEDFF;">)-(?&lt;</span><span style="color:#E1E4E8;">month</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)-(?&lt;</span><span style="color:#E1E4E8;">day</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">u</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;2015-01-02&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(re, </span><span style="color:#9ECBFF;">&#39;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;02/01/2015&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// \\k&lt;组名&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RE_TWICE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">(?&lt;</span><span style="color:#E1E4E8;">word</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">[a-z]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)!</span><span style="color:#F97583;">\\k&lt;</span><span style="color:#E1E4E8;">word</span><span style="color:#F97583;">&gt;$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">RE_TWICE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc!abc&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">RE_TWICE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc!ab&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 数字引用（\\1）依然有效</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RE_TWICE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">(?&lt;</span><span style="color:#E1E4E8;">word</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">[a-z]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)!</span><span style="color:#F97583;">\\1$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">RE_TWICE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc!abc&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">RE_TWICE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc!ab&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 同时使用</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">RE_TWICE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">(?&lt;</span><span style="color:#E1E4E8;">word</span><span style="color:#DBEDFF;">&gt;</span><span style="color:#79B8FF;">[a-z]</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">)!</span><span style="color:#F97583;">\\k&lt;</span><span style="color:#E1E4E8;">word</span><span style="color:#F97583;">&gt;</span><span style="color:#DBEDFF;">!</span><span style="color:#F97583;">\\1$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">RE_TWICE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc!abc!abc&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#79B8FF;">RE_TWICE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;abc!abc!ab&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> re </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /(?&lt;</span><span style="color:#24292E;">year</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{4}</span><span style="color:#032F62;">)-(?&lt;</span><span style="color:#24292E;">month</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)-(?&lt;</span><span style="color:#24292E;">day</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">u</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#032F62;">&#39;2015-01-02&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(re, </span><span style="color:#032F62;">&#39;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;02/01/2015&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// \\k&lt;组名&gt;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RE_TWICE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">(?&lt;</span><span style="color:#24292E;">word</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">[a-z]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)!</span><span style="color:#D73A49;">\\k&lt;</span><span style="color:#24292E;">word</span><span style="color:#D73A49;">&gt;$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">RE_TWICE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc!abc&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">RE_TWICE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc!ab&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 数字引用（\\1）依然有效</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RE_TWICE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">(?&lt;</span><span style="color:#24292E;">word</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">[a-z]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)!</span><span style="color:#D73A49;">\\1$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">RE_TWICE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc!abc&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">RE_TWICE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc!ab&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 同时使用</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">RE_TWICE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">(?&lt;</span><span style="color:#24292E;">word</span><span style="color:#032F62;">&gt;</span><span style="color:#005CC5;">[a-z]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">)!</span><span style="color:#D73A49;">\\k&lt;</span><span style="color:#24292E;">word</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">!</span><span style="color:#D73A49;">\\1$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">RE_TWICE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc!abc!abc&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#005CC5;">RE_TWICE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;abc!abc!ab&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h2><p><code>独一无二</code></p><ul><li><p>不能与其它类型进行运算</p></li><li><p>可以转为 bool 值</p></li><li><p>Symbol.prototype.description</p></li><li><p>作为属性名，必须放在方括号中</p></li><li><p>Object.getOwnPropertySymbols()</p></li><li><p>Symbol.for() &amp; Symbol.keyFor()</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Symbol.</span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">s1 </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> s2; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">Symbol.</span><span style="color:#B392F0;">keyFor</span><span style="color:#E1E4E8;">(s1); </span><span style="color:#6A737D;">// &quot;foo&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Symbol.</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Symbol.</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">s1 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> s2; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">Symbol.</span><span style="color:#6F42C1;">keyFor</span><span style="color:#24292E;">(s1); </span><span style="color:#6A737D;">// &quot;foo&quot;</span></span></code></pre></div></li><li><p>11 个内置的 Symbol 值，指向语言内部使用的方法</p></li><li><p>...</p></li></ul><h2 id="set-map" tabindex="-1">Set &amp;&amp; Map <a class="header-anchor" href="#set-map" aria-label="Permalink to &quot;Set &amp;&amp; Map&quot;">​</a></h2><ul><li>Set</li></ul><p><code>NaN === NaN true</code> 添加两次只有一个 NaN 值</p><p><code>{} === {} false</code> 添加两次保持两次</p><ul><li><p>API(Set)</p><ul><li><p>方法</p><ul><li>size</li><li>add</li><li>has</li><li>delete</li><li>clear</li></ul></li><li><p>遍历方法</p><ul><li>keys</li><li>values</li><li>entries</li><li>forEach</li></ul></li><li><p>数组去重</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> set </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// spread</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">set]); </span><span style="color:#6A737D;">// [1, 3, 4, 6, 5]</span></span>
<span class="line"><span style="color:#6A737D;">// Array.from</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(set)); </span><span style="color:#6A737D;">// [1, 3, 4, 6, 5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// spread</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">set]); </span><span style="color:#6A737D;">// [1, 3, 4, 6, 5]</span></span>
<span class="line"><span style="color:#6A737D;">// Array.from</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(set)); </span><span style="color:#6A737D;">// [1, 3, 4, 6, 5]</span></span></code></pre></div></li></ul></li><li><p>WeakSet</p></li></ul><p><code>值必须为对象（数值成员必须为对象），弱引用，不考虑垃圾回收机制，不支持遍历</code></p><ul><li><p>API(WeakSet)</p><ul><li>方法 <ul><li>add</li><li>delete</li><li>has</li></ul></li></ul></li><li><p>Map</p></li></ul><p><code>作为构造函数，Map 也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组</code></p><div class="warning custom-block"><p class="custom-block-title">Object VS Map</p><p>传统的 JS 中的 Object 提供键值对集合（只能用字符串作为键值） Map 提供值-值形式</p></div><ul><li><p>API(Map)</p><ul><li><p>方法</p><ul><li>set: f(key, value)</li><li>get: f(key)</li><li>size</li><li>has</li><li>delete</li><li>clear</li></ul></li><li><p>遍历方法</p><ul><li>keys</li><li>values</li><li>entries</li><li>forEach</li></ul></li></ul></li><li><p>WeakMap</p></li></ul><p><code>只接受键名为对象（null除外），不计入垃圾回收机制</code></p><ul><li>API(WeakMap) <ul><li>方法 <ul><li>get</li><li>set</li><li>delete</li><li>has</li></ul></li></ul></li></ul><h2 id="generate" tabindex="-1">Generate <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;Generate&quot;">​</a></h2><p><code>* yeild</code></p><ul><li>next 携带参数，表示上一个 yield 的返回值，第一次传参数无效</li><li>for...of 遍历 return 值不在遍历值当中</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gen</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">g</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gen</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gen</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">g</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gen</span><span style="color:#24292E;">();</span></span></code></pre></div><ul><li><p>throw</p><ul><li>至少执行一次 <code>next()</code></li><li>捕获错误 <ul><li>外部内部都存在 <code>try...catch</code>，捕获内部 --&gt; 捕获外部</li><li>内部</li><li>外部</li><li><code>throw &amp; g.throw</code> 不同</li><li>一旦抛出错误，没有被内部捕获，不会执行，此后再调用 <code>next()</code>，返回 <code>{ value: undefined, done: true }</code></li></ul></li></ul></li><li><p>return</p><ul><li>终结 generate 函数执行</li><li>不提供参数，<code>return() ==&gt; { value: undefined, done: true }</code></li><li>提供参数，<code>return(&#39;hello&#39;) ==&gt; { value: &#39;hello&#39;, done: true }</code></li><li>try...catch...finally 先执行 finally 再执行 return</li></ul></li><li><p>yield</p></li></ul><p><code>调用另一个generate函数，放在函数内部（手动遍历）返回遍历器对象（for...of）</code></p><ul><li><p>遇到 return 返回的结果给一个赋值变量</p></li><li><p>this</p><ul><li>g 返回的是一个遍历器对象，不是 this 对象</li><li>不能与 new 命令使用，报错</li><li>变通</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#F97583;">function*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">F</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">f.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Object {value: 2, done: false}</span></span>
<span class="line"><span style="color:#E1E4E8;">f.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Object {value: 3, done: false}</span></span>
<span class="line"><span style="color:#E1E4E8;">f.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Object {value: undefined, done: true}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">obj.a; </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.b; </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.c; </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2 new</span></span>
<span class="line"><span style="color:#F97583;">function*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gen</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> gen.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">gen</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">f.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Object {value: 2, done: false}</span></span>
<span class="line"><span style="color:#E1E4E8;">f.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Object {value: 3, done: false}</span></span>
<span class="line"><span style="color:#E1E4E8;">f.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Object {value: undefined, done: true}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">f.a; </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">f.b; </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">f.c; </span><span style="color:#6A737D;">// 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">F</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">f.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Object {value: 2, done: false}</span></span>
<span class="line"><span style="color:#24292E;">f.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Object {value: 3, done: false}</span></span>
<span class="line"><span style="color:#24292E;">f.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Object {value: undefined, done: true}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">obj.a; </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">obj.b; </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">obj.c; </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2 new</span></span>
<span class="line"><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gen</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> gen.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">gen</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">F</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">f.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Object {value: 2, done: false}</span></span>
<span class="line"><span style="color:#24292E;">f.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Object {value: 3, done: false}</span></span>
<span class="line"><span style="color:#24292E;">f.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Object {value: undefined, done: true}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">f.a; </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">f.b; </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">f.c; </span><span style="color:#6A737D;">// 3</span></span></code></pre></div></li><li><p>异步应用</p></li></ul><p>诞生之前<code>回调函数 事件监听 发布/订阅 Promise</code></p><ul><li><p>协程（线程）</p><ul><li><ol><li>协程 A 开始执行</li></ol></li><li><ol start="2"><li>执行到一半，暂停执行，转交到协程 B</li></ol></li><li><ol start="3"><li>一段时间，协程 B 交还执行权</li></ol></li><li><ol start="4"><li>协程 A 恢复执行</li></ol></li></ul></li><li><p>Thunk 函数(传名调用，只接受回调函数作为单参数)</p><p><code>（传值调用 🆚 传名调用）</code></p></li><li><p>CO 模块（自动执行器）</p><div class="warning custom-block"><p class="custom-block-title">自动执行器</p><p>自动执行器注意的是，next 携带参数是作为上一个 yield 的返回值</p></div></li></ul><h2 id="class" tabindex="-1">Class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;Class&quot;">​</a></h2><ul><li><p>new.target</p><p><code>用在构造函数之中，返回new命令作用于的那个构造函数</code></p></li><li><p>继承</p><ul><li>super <ul><li><ol><li>super 作为函数调用时，作为父类的构造对象</li></ol></li><li><ol start="2"><li>super 作为对象时，在普通方法中，指向父类的原型对象；在静态方法中指向父类</li></ol><ul><li>无法通过 super 调用父类的静态属性和方法</li><li>子类普通方法中 super 调用父类的方法时，方法内部的 this 指向当前的子类实例</li><li>用在静态方法中，指向父类，而不是父类的原型对象</li><li>子类静态方法中 super 调用父类的方法时，方法内部的 this 指向子类，而不是子类实例</li></ul></li><li>⚠️super 必须显式指定作为函数还是作为对象使用，否则会报错</li></ul></li></ul></li></ul><h2 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-label="Permalink to &quot;ArrayBuffer&quot;">​</a></h2><ul><li>DataView 视图</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buf</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dataView</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataView</span><span style="color:#E1E4E8;">(buf);</span></span>
<span class="line"><span style="color:#E1E4E8;">dataView.</span><span style="color:#B392F0;">getUint8</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buf</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dataView</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataView</span><span style="color:#24292E;">(buf);</span></span>
<span class="line"><span style="color:#24292E;">dataView.</span><span style="color:#6F42C1;">getUint8</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 0</span></span></code></pre></div><ul><li>TypedArray 视图 <ul><li>小端字节序（litte endian）：将最不重要的字节排在前面</li><li>大端字节序（big endian）：将最重要的字节放在前面</li></ul></li></ul><p><code>不是一个构造函数，一组构造函数组成</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buffer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArrayBuffer</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">x1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Int32Array</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">x1[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">x2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(buffer);</span></span>
<span class="line"><span style="color:#E1E4E8;">x2[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">x1[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]; </span><span style="color:#6A737D;">// 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayBuffer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Int32Array</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">x1[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">x2[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">x1[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 2</span></span></code></pre></div><ul><li>prototype 方法 <ul><li>byteLength</li><li>slice</li><li>isView(参数是否为 ArrayBuffer 的视图实例)</li></ul></li></ul><h2 id="commonjs-es6" tabindex="-1">CommonJS ES6 <a class="header-anchor" href="#commonjs-es6" aria-label="Permalink to &quot;CommonJS ES6&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">CommonJS</p><p>导入 --&gt; require; 导出 --&gt; exports module.exports</p></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * commonjs exports 对象形式</span></span>
<span class="line"><span style="color:#6A737D;"> * function(module, exports, require) {}</span></span>
<span class="line"><span style="color:#6A737D;"> * commonjs(module &amp; module.exports) 两个参数都要操作⚠️⚠️⚠️</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { exports: {} };</span></span>
<span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 多个exports导出时</span></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> {a, b, c}; </span><span style="color:#6A737D;">// 这里会导出一个对象 {a, b, c}</span></span>
<span class="line"><span style="color:#6A737D;">// 只允许一个module.exports</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {a};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// b.js</span></span>
<span class="line"><span style="color:#6A737D;">// 一个文件同时出现 exports 和 modules.exports 时 ⚠️⚠️⚠️</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> lib </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./a.js&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// {a: 1}</span></span>
<span class="line"><span style="color:#E1E4E8;">lib.cc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello common js&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// exports ==&gt; {a: 1, b: 2, c: 3}</span></span>
<span class="line"><span style="color:#6A737D;">// 改变 module.exports 属性时 a.js中 exports 对象属性不会变动</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * commonjs exports 对象形式</span></span>
<span class="line"><span style="color:#6A737D;"> * function(module, exports, require) {}</span></span>
<span class="line"><span style="color:#6A737D;"> * commonjs(module &amp; module.exports) 两个参数都要操作⚠️⚠️⚠️</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { exports: {} };</span></span>
<span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 多个exports导出时</span></span>
<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> {a, b, c}; </span><span style="color:#6A737D;">// 这里会导出一个对象 {a, b, c}</span></span>
<span class="line"><span style="color:#6A737D;">// 只允许一个module.exports</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {a};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// b.js</span></span>
<span class="line"><span style="color:#6A737D;">// 一个文件同时出现 exports 和 modules.exports 时 ⚠️⚠️⚠️</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lib </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./a.js&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// {a: 1}</span></span>
<span class="line"><span style="color:#24292E;">lib.cc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello common js&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// exports ==&gt; {a: 1, b: 2, c: 3}</span></span>
<span class="line"><span style="color:#6A737D;">// 改变 module.exports 属性时 a.js中 exports 对象属性不会变动</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">ES6</p><p>导入 --&gt; import; 导出 --&gt; export (export default)</p></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// es6 规范主要对属性变化的是操作 module.exports 一个参数⚠️⚠️⚠️</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { exports: {} };</span></span>
<span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { a, b, c };</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// b.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./a.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// es6 导出的对象 {a: 1, b: 2, c: 3}</span></span>
<span class="line"><span style="color:#6A737D;">// 存在默认default导出时 对象格式 {a: 1, b: 2, c: 3, default: 1}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// es6 规范主要对属性变化的是操作 module.exports 一个参数⚠️⚠️⚠️</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { exports: {} };</span></span>
<span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { a, b, c };</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// b.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./a.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// es6 导出的对象 {a: 1, b: 2, c: 3}</span></span>
<span class="line"><span style="color:#6A737D;">// 存在默认default导出时 对象格式 {a: 1, b: 2, c: 3, default: 1}</span></span></code></pre></div>`,71),e=[o];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const D=s(p,[["render",t]]);export{u as __pageData,D as default};
