import{_ as e,o as l,c as a,Q as o}from"./chunks/framework.7c0fadea.js";const p="/learning-docs2/assets/images/001.png",i="/learning-docs2/assets/images/002.png",t="/learning-docs2/assets/images/003.png",k=JSON.parse('{"title":"Event Loop","description":"","frontmatter":{},"headers":[],"relativePath":"notes/javascript/event-loop.md","filePath":"notes/javascript/event-loop.md","lastUpdated":1675328164000}'),c={name:"notes/javascript/event-loop.md"},s=o('<h1 id="event-loop" tabindex="-1">Event Loop <a class="header-anchor" href="#event-loop" aria-label="Permalink to &quot;Event Loop&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">事件循环</p><p>🔥事件队列 异步 进程 线程</p></div><h2 id="cpu、进程、线程之间的关系" tabindex="-1">CPU、进程、线程之间的关系 <a class="header-anchor" href="#cpu、进程、线程之间的关系" aria-label="Permalink to &quot;CPU、进程、线程之间的关系&quot;">​</a></h2><p><code>进程</code>是 cpu 资源分配的最小单元（是能拥有资源和独立运行的最小单位）</p><p><code>线程</code>是 cpu 调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）</p><p>不同<code>进程</code>之间也可以通信，代价较大</p><p><code>单线程</code>与<code>多线程</code>，都是指在一个<code>进程</code>内的单和多</p><h2 id="浏览器是多进程的" tabindex="-1">浏览器是多进程的 <a class="header-anchor" href="#浏览器是多进程的" aria-label="Permalink to &quot;浏览器是多进程的&quot;">​</a></h2><p>浏览器是多进程的</p><p>每一个 tab 页，就是一个独立的进程</p><h2 id="浏览器包含了哪些进程" tabindex="-1">浏览器包含了哪些进程 <a class="header-anchor" href="#浏览器包含了哪些进程" aria-label="Permalink to &quot;浏览器包含了哪些进程&quot;">​</a></h2><h3 id="主进程" tabindex="-1">主进程 <a class="header-anchor" href="#主进程" aria-label="Permalink to &quot;主进程&quot;">​</a></h3><ul><li><p>协调控制其他子进程（创建、销毁）</p></li><li><p>浏览器界面显示，用户交互，前进、后退、收藏</p></li><li><p>将渲染进程得到的内存中的 bitmap，绘制到用户界面上</p></li><li><p>处理不可见操作，网络操作，文件访问</p></li></ul><h3 id="第三方插件进程" tabindex="-1">第三方插件进程 <a class="header-anchor" href="#第三方插件进程" aria-label="Permalink to &quot;第三方插件进程&quot;">​</a></h3><p><code>每个插件一个进程，使用的时候，进程被创建</code></p><blockquote><p>GPU 进程</p></blockquote><p>用于 3D 绘制等</p><blockquote><p>渲染进程（浏览器内核）</p></blockquote><ul><li><p>负责页面渲染，脚本执行，事件处理等</p></li><li><p>每个 tab 页一个渲染进程</p></li></ul><h2 id="浏览器内核-渲染进程" tabindex="-1">浏览器内核（渲染进程） <a class="header-anchor" href="#浏览器内核-渲染进程" aria-label="Permalink to &quot;浏览器内核（渲染进程）&quot;">​</a></h2><blockquote><p>GUI 渲染进程</p></blockquote><ul><li><p>负责渲染页面，布局和绘制</p></li><li><p>页面需要重绘和回流时，该线程就会执行</p></li><li><p>与 js 引擎互斥，防止渲染结果不可预期</p></li></ul><blockquote><p>JS 引擎线程</p></blockquote><ul><li><p>负责处理解析和执行 JavaScript 脚本程序</p></li><li><p>只有一个 JS 引擎线程（单线程）</p></li><li><p>与 GUI 渲染线程互斥，防止渲染结果不可预期</p></li></ul><blockquote><p>事件触发线程</p></blockquote><ul><li><p>用来控制事件循环（鼠标点击，setTimeout，ajax）</p></li><li><p>当事件满足触发条件时，将事件放入到 JS 引擎所在的执行队列中</p></li></ul><blockquote><p>定时触发器线程</p></blockquote><ul><li><p>setInterval 与 setTimeout 所在的线程</p></li><li><p>定时任务并不是由 JS 引擎计时的，是由定时触发线程来计时的</p></li><li><p>计时完毕后，通知事件触发线程</p></li></ul><blockquote><p>异步 http 请求线程</p></blockquote><ul><li><p>浏览器有一个单独的线程用于处理 AJAX 请求</p></li><li><p>当请求完成时，若有回调函数，通知时间触发线程</p></li></ul><h2 id="javascript-单线程" tabindex="-1">JavaScript 单线程？ <a class="header-anchor" href="#javascript-单线程" aria-label="Permalink to &quot;JavaScript 单线程？&quot;">​</a></h2><p><code>多线程需要加锁，同时操作DOM，在多线程不加锁的情况下，最终会导致DOM渲染的结果不可预期</code></p><h2 id="gui-渲染线程与-js-引擎线程互斥" tabindex="-1">GUI 渲染线程与 JS 引擎线程互斥？ <a class="header-anchor" href="#gui-渲染线程与-js-引擎线程互斥" aria-label="Permalink to &quot;GUI 渲染线程与 JS 引擎线程互斥？&quot;">​</a></h2><p><code>当JS引擎线程执行时，GUI渲染线程会被挂起，GUI更新则会被保存在一个队列中等待JS引擎线程空闲时立即被执行</code></p><h2 id="event-loop-go" tabindex="-1">Event Loop GO <a class="header-anchor" href="#event-loop-go" aria-label="Permalink to &quot;Event Loop GO&quot;">​</a></h2><ul><li><p>同步任务和异步任务</p></li><li><p>同步任务在 js 引擎线程上执行，形成一个执行栈</p></li><li><p>事件触发线程管理一个任务队列，异步任务触发条件达成，将回调事件放到任务队列中</p></li><li><p>执行栈中所有同步任务执行完毕，js 引擎线程空闲，系统会读取</p></li></ul><img src="'+p+'"><ul><li><p>宏任务 --&gt; 事件队列（循环）</p></li><li><p>微任务 --&gt; 微任务队列</p></li></ul><img src="'+i+'"><p><code>宏任务完成立即执行当前一轮的微任务</code></p><ul><li><p>执行一个宏任务（栈中没有从事件队列中获取）</p></li><li><p>执行过程中如果遇到微任务，添加到微任务队列</p></li><li><p>宏任务执行完毕后，立即执行当前微任务队列的所有微任务</p></li><li><p>宏任务执行完毕，开始检查渲染，然后 GUI 线程接管渲染</p></li><li><p>渲染完毕后，js 线程继续接管，开始下一个宏任务（事件队列）</p></li></ul><img src="'+t+'">',42),r=[s];function n(d,u,h,b,q,m){return l(),a("div",null,r)}const v=e(c,[["render",n]]);export{k as __pageData,v as default};
