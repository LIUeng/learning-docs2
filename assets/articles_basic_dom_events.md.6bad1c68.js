import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.7c0fadea.js";const h=JSON.parse('{"title":"DOM BOM 事件流","description":"","frontmatter":{},"headers":[],"relativePath":"articles/basic/dom_events.md","filePath":"articles/basic/dom_events.md","lastUpdated":1670330848000}'),e={name:"articles/basic/dom_events.md"},o=n(`<h1 id="dom-bom-事件流" tabindex="-1">DOM BOM 事件流 <a class="header-anchor" href="#dom-bom-事件流" aria-label="Permalink to &quot;DOM BOM 事件流&quot;">​</a></h1><p>兼容性：IE9、Opera、Firefox、Chrome 和 Safari 支持 DOM 事件流</p><h2 id="事件冒泡" tabindex="-1">事件冒泡 <a class="header-anchor" href="#事件冒泡" aria-label="Permalink to &quot;事件冒泡&quot;">​</a></h2><p>事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，逐级向上传播到较为不具体的节点（文档 document）</p><h2 id="事件捕获" tabindex="-1">事件捕获 <a class="header-anchor" href="#事件捕获" aria-label="Permalink to &quot;事件捕获&quot;">​</a></h2><p>document 文档接收到事件，然后逐级向下传播的到最具体元素接收事件</p><h2 id="事件处理程序" tabindex="-1">事件处理程序 <a class="header-anchor" href="#事件处理程序" aria-label="Permalink to &quot;事件处理程序&quot;">​</a></h2><h3 id="html-事件处理程序" tabindex="-1">HTML 事件处理程序 <a class="header-anchor" href="#html-事件处理程序" aria-label="Permalink to &quot;HTML 事件处理程序&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">alert</span><span style="color:#9ECBFF;">(&#39;HELLO&#39;)&quot;</span><span style="color:#E1E4E8;">&gt;&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">alert</span><span style="color:#032F62;">(&#39;HELLO&#39;)&quot;</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="dom0-级事件处理程序" tabindex="-1">DOM0 级事件处理程序 <a class="header-anchor" href="#dom0-级事件处理程序" aria-label="Permalink to &quot;DOM0 级事件处理程序&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;app&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;HELLO&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;app&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;HELLO&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="dom2-级事件处理程序" tabindex="-1">DOM2 级事件处理程序 <a class="header-anchor" href="#dom2-级事件处理程序" aria-label="Permalink to &quot;DOM2 级事件处理程序&quot;">​</a></h3><p>兼容性：IE9、Firefox、Safari、Chrome 和 Opera</p><ul><li>addEventListener</li></ul><p>绑定多个相同的事件，按先后顺序执行</p><p>接收三个参数：要处理的事件名、要处理的事件名函数、bool 值（true: 表示在捕获阶段调用事件处理程序；false: 表示在冒泡阶段调用事件处理程序）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;app&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {}, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;app&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {}, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span></code></pre></div><ul><li>removeEventListener</li></ul><p>参数相同，三个参数必须一样（注意：事件名处理的函数参数必须一致，否则无效）</p><h3 id="ie-事件处理程序" tabindex="-1">IE 事件处理程序 <a class="header-anchor" href="#ie-事件处理程序" aria-label="Permalink to &quot;IE 事件处理程序&quot;">​</a></h3><ul><li>attachEvent &amp; detachEvent</li></ul><p>绑定多个相同的事件，倒序执行</p><p>接收两个参数，事件处理程序名称和事件处理程序函数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;app&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// on + click</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">attachEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;onclick&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 事件处理程序会在全局作用域内执行</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> window); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;app&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// on + click</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">attachEvent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;onclick&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 事件处理程序会在全局作用域内执行</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> window); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><h3 id="dom-事件对象" tabindex="-1">DOM 事件对象 <a class="header-anchor" href="#dom-事件对象" aria-label="Permalink to &quot;DOM 事件对象&quot;">​</a></h3><blockquote><p>只有在事件处理程序执行期间，event 对象才会存在；一旦事件处理程序执行完成，event 对象就会被销毁</p></blockquote><ul><li>事件函数处理内部，对象 this 始终等于 currentTarget 的值，而 target 只包含事件的目标</li></ul><table><thead><tr><th>属性/方法</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>bubbles</td><td>Boolean</td><td>事件是否冒泡</td></tr><tr><td>cancelable</td><td>Boolean</td><td>是否可以取消事件的默认行为</td></tr><tr><td>currentTarget</td><td>Element</td><td>当前正在处理事件的元素</td></tr><tr><td>defaultPrevented</td><td>Boolean</td><td>true: 表示已经调用了 preventDefault()</td></tr><tr><td>detail</td><td>Interger</td><td>与事件相关的细节信息</td></tr><tr><td>eventPhase</td><td>Interger</td><td>调用事件处理程序的阶段：1. 捕获 2. 目标 3. 冒泡</td></tr><tr><td>preventDefault</td><td>Function</td><td>取消事件的默认行为，cancelable 为 true 时可调用</td></tr><tr><td>stopImmediatePropagation</td><td>Function</td><td>取消事件的进一步冒泡或捕获，同时阻止任何事件处理程序被调用</td></tr><tr><td>stopPropagation</td><td>Function</td><td>取消事件的冒泡行为</td></tr><tr><td>target</td><td>Element</td><td>事件目标元素</td></tr><tr><td>trusted</td><td>Boolean</td><td>true 浏览器生成的事件；false 表示人为因素</td></tr><tr><td>type</td><td>String</td><td>事件类型</td></tr><tr><td>view</td><td>AbstractView</td><td>与事件关联的抽象视图，window 对象</td></tr></tbody></table><h3 id="ie-事件对象" tabindex="-1">IE 事件对象 <a class="header-anchor" href="#ie-事件对象" aria-label="Permalink to &quot;IE 事件对象&quot;">​</a></h3><ul><li>IE 事件对象中，event = event || window.event</li><li>IE 事件处理函数中 this 指向不能认为始终等于事件目标 event.srcElement,</li></ul><table><thead><tr><th>属性/方法</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>cancelBubble</td><td>Boolean</td><td>取消事件冒泡</td></tr><tr><td>returnValue</td><td>Boolean</td><td>取消事件的默认行为</td></tr><tr><td>srcElement</td><td>Element</td><td>事件的目标</td></tr><tr><td>type</td><td>String</td><td>事件的类型</td></tr></tbody></table><h2 id="事件对象-1" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象-1" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><blockquote><p>判断是否支持DOM2或者DOM3事件</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// HTMLEvents 2.0 | UIEvents 3.0 | FocusEvent 3.0 | MouseEvent 2.0 3.0</span></span>
<span class="line"><span style="color:#6A737D;">// DOM2</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isSupported</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.implementation.</span><span style="color:#B392F0;">hasFeature</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;HTMLEvents&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2.0&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// DOM3</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isSupported</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.implementation.</span><span style="color:#B392F0;">hasFeature</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;UIEvents&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;3.0&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// HTMLEvents 2.0 | UIEvents 3.0 | FocusEvent 3.0 | MouseEvent 2.0 3.0</span></span>
<span class="line"><span style="color:#6A737D;">// DOM2</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isSupported</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.implementation.</span><span style="color:#6F42C1;">hasFeature</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;HTMLEvents&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2.0&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// DOM3</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isSupported</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.implementation.</span><span style="color:#6F42C1;">hasFeature</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;UIEvents&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;3.0&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="ui事件" tabindex="-1">UI事件 <a class="header-anchor" href="#ui事件" aria-label="Permalink to &quot;UI事件&quot;">​</a></h3><ul><li>DOMActivate 表示元素已经被用户操作（鼠标和键盘）激活；DOM3级事件中已经移除</li><li>load</li></ul><ol><li>页面完全加载(包含图像文件，js文件，css文件等外部资源)触发: window/document</li><li>图像下载完毕触发: img</li><li>嵌入的内容触发：link(style) script</li></ol><ul><li>unload 页面完全卸载或者嵌入的内容完全卸载 window/document</li><li>abort 用户停止下载过程时，如果嵌入的内容没有加载完触发</li><li>error 触发条件：window link script</li><li>select 用户选择input或者textarea字符时触发</li><li>resize 窗口或者框架的大小变化时触发（compatMode 混杂模式 document.documentElement)</li><li>scroll 滚动元素触发</li></ul><h3 id="焦点事件" tabindex="-1">焦点事件 <a class="header-anchor" href="#焦点事件" aria-label="Permalink to &quot;焦点事件&quot;">​</a></h3><ul><li>blur 失去焦点时触发，不冒泡(支持捕获)</li><li>DOMFocusIn 元素获得焦点时触发，冒泡，DOM3遗弃</li><li>DOMFocusOut 元素失去焦点时触发，冒泡，DOM3遗弃</li><li>focus 元素获取焦点时触发，不冒泡(支持捕获)</li><li>focusin 元素获取焦点时触发，冒泡，兼容性：IE5.5+、Safari 5.1+、Opera 11.5+和 Chrome</li><li>focusout 元素失去焦点时触发，冒泡，兼容性：IE5.5+、Safari 5.1+、Opera 11.5+和 Chrome</li></ul><blockquote><p>当焦点从页面中的一个元素移动到另一个元素，触发顺序</p></blockquote><p><code>focusout, focusin, blur, DOMFocusOut, focus, DOMFocusIn</code></p><h3 id="鼠标与滚轮事件" tabindex="-1">鼠标与滚轮事件 <a class="header-anchor" href="#鼠标与滚轮事件" aria-label="Permalink to &quot;鼠标与滚轮事件&quot;">​</a></h3><ul><li>click 单击鼠标按钮（左边按钮）或者enter</li><li>dbclick 双击鼠标按钮</li><li>mousedown 任意鼠标按钮</li><li>mouseenter 鼠标移动从元素外部首次移动到元素范围之内触发（后代子元素不会触发），不冒泡</li><li>mouseleave 鼠标从元素内部移动到外部触发（后代元素不会触发），不冒泡</li><li>mousemove 鼠标在元素内部移动触发</li><li>mouseout 元素移入另一个元素触发</li><li>mouseover 元素外部移入元素边界之内</li><li>mouseup 释放鼠标</li></ul><blockquote><p>点击两次触发顺序</p></blockquote><p><code>mousedown, mouseup, click, mousedown, mouseup, click, dblclick</code></p><p><code>客户区坐标位置</code></p><p>clientX, clientY 不包含滚动距离（视口中x, y距离）</p><p>pageX, pageY 包含滚动距离（鼠标光标在页面中的位置）</p><p>screenX, screenY 相对屏幕（电脑桌面）位置</p><p><code>热键</code></p><p>shiftKey、ctrlKey、altKey 和 metaKey（IE8及之前版本都不支持）</p><p><code>鼠标按钮</code></p><p>button =&gt; 0 没按下 | 1 主鼠标按钮 | 2 次鼠标按钮 | 3 同时主次 | 4 中间 | 5 主中 | 6 中次 | 7 主中次</p><p><code>detail信息</code></p><p>event.detail 计数（事件在某一个元素触发多少次 1开始）</p><p><code>鼠标滚轮事件</code></p><p>mousewheel, DOMMouseScroll（firefox)</p><h3 id="键盘与文本事件" tabindex="-1">键盘与文本事件 <a class="header-anchor" href="#键盘与文本事件" aria-label="Permalink to &quot;键盘与文本事件&quot;">​</a></h3><p>DOM3级（所有元素都支持，文本框输入文本时最长用到，支持热键）</p><ul><li>keydown 用户按下任意键触发，按住不放时，重复触发</li><li>keypress用户按下任意键触发，按住不放时，重复触发</li><li>keyup 释放键触发</li></ul><blockquote><p>按下字符键触发顺序: keypress keydown keyup 按下非字符键触发顺序：keydown keyup</p></blockquote><p><code>键码</code></p><p>keypress 时间获取键码 =&gt; event =&gt; charCode || keyCode(ASCII码) =&gt; String.fromCharCode 转为实际字符</p><p><code>event.location(什么位置上的键)</code></p><p>0表示默认键盘 | 1表示左侧键盘 | 2表示右侧键盘 | 3表示数字小键盘 | 4表示移动设备键盘 | 5表示手柄</p><ul><li>textInput</li></ul><p><code>textInput VS keypress（两大区别）</code></p><blockquote><ol><li>任何获得焦点的元素都能触发keypress事件，但只有编辑区域才能触发textInput事件</li><li>textInput输入实际字符的键时会触发，keypress按下能够影响文本显示的键</li></ol></blockquote><p><code>event.inputMethod</code></p><p>0不确定输入 | 1键盘输入 | 2粘贴进来 | 3拖放进来 | 4使用IME输入 | 5表单中选择某一项输入 | 6手写输入 | 7语音输入 | 8组合输入 | 9脚本输入</p><h3 id="复合事件" tabindex="-1">复合事件 <a class="header-anchor" href="#复合事件" aria-label="Permalink to &quot;复合事件&quot;">​</a></h3><p>DOM3级 用于处理IME的输入序列</p><ul><li>compositionstart 开始输入</li><li>compositionupdate 输入字段中插入新字符</li><li>compositionend 关闭时触发</li></ul><h3 id="变动事件" tabindex="-1">变动事件 <a class="header-anchor" href="#变动事件" aria-label="Permalink to &quot;变动事件&quot;">​</a></h3><p>DOM发生变化时给出提示 =&gt; mutation</p><ul><li>DOMSubtreeModified DOM结构发生任何变化</li><li>DOMNodeInserted 一个结点作为子节点插入到另一节点时触发</li><li>DOMNodeRemoved 在节点从其父节点移除时触发</li><li>DOMNodeInsertedIntoDocument 插入文档或之后触发（DOMNodeInserted之后触发）</li><li>DOMNodeRemovedFromDocument 从文档中移除之后触发（DOMNodeRemoved之后触发）</li><li>DOMAttrModified 属性修改之后触发</li><li>DOMCharacterDataModified 在文本节点的值改变之后触发</li></ul><ol><li><code>删除节点</code> =&gt; replaceChild | removeChild</li><li><code>插入节点</code> =&gt; appendChild | replaceChild | insertBefore</li></ol><h3 id="html5事件" tabindex="-1">HTML5事件 <a class="header-anchor" href="#html5事件" aria-label="Permalink to &quot;HTML5事件&quot;">​</a></h3><ul><li>contextmenu 单击鼠标右键调出上下文菜单</li></ul><p>事件是冒泡的 =&gt; 阻止默认行为 event.preventDefault() | event.returnValue = false;</p><ul><li>beforeunload 页面卸载前阻止这一操作</li></ul><p>显示的窗口的值：event.returnValue = &#39;message&#39;;</p><ul><li>DOMContentLoaded 形成完整的DOM树之后触发（document | window）</li></ul><p>不用等图像、JavaScript文件、CSS文件下载完毕</p><ul><li>readystatechange</li></ul><p>提供与文档或者元素加载状态有关的信息（5个状态）(event.target.readyState)</p><ol><li>uninitialized(对象存在单尚未初始化)</li><li>loading(对象正在加载数据)</li><li>loaded(对象加载数据完毕)</li><li>interactive(可以操作对象，还没完全加载)</li><li>complete(对象已经加载完毕)</li></ol><h3 id="pageshow-和-pagehide-事件" tabindex="-1">pageshow 和 pagehide 事件 <a class="header-anchor" href="#pageshow-和-pagehide-事件" aria-label="Permalink to &quot;pageshow 和 pagehide 事件&quot;">​</a></h3><p>Firefox Opera =&gt; bfcache(back-forward cache)</p><ol><li>保存页面的状态</li><li>不会触发load事件</li><li>event对象上有个persist属性 =&gt; true</li><li>指定了unload事件处理程序的页面会被排除在bfcache之外</li></ol><h3 id="hashchange" tabindex="-1">hashchange <a class="header-anchor" href="#hashchange" aria-label="Permalink to &quot;hashchange&quot;">​</a></h3><p><strong>判断兼容性 稳妥</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// IE8 文档在 IE7 下运行</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> isSupported </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;onhashchange&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> windwo </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (document.documentMode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> document.documentMode </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// IE8 文档在 IE7 下运行</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> isSupported </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;onhashchange&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> windwo </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (document.documentMode </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> document.documentMode </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">)</span></span></code></pre></div><p>URL 的参数列表（及 URL 中“#”号后面的所有字符串）(window 对象)</p><ol><li>event包含两个属性 oldURL newURL</li><li>使用location.hash获取url hash字符串（#后面的字符串）</li></ol><h3 id="设备事件" tabindex="-1">设备事件 <a class="header-anchor" href="#设备事件" aria-label="Permalink to &quot;设备事件&quot;">​</a></h3><ul><li>orientationchange</li></ul><p>window.orientation =&gt; 0肖像模式 90左旋转的横向模式 -90右旋转的横向模式</p><ul><li>MozOrientation 检测到方向变化触发此事件（加速计支持）</li><li>deviceorientation window对象触发（加速计支持）</li><li>devicemotion 不仅仅是设备方向改变，告诉开发人员设备什么时候开始移动（行走 掉下）</li></ul><h3 id="触摸与手势事件" tabindex="-1">触摸与手势事件 <a class="header-anchor" href="#触摸与手势事件" aria-label="Permalink to &quot;触摸与手势事件&quot;">​</a></h3><ol><li>触摸事件</li></ol><ul><li>touchstart</li><li>touchmove</li><li>touchend</li><li>touchcancel</li></ul><p>顺序（包括鼠标）=&gt; touchstart mouseover mousemove（一次） mousedown mouseup click touchend</p><ol start="2"><li>手势事件</li></ol><ul><li>gensturestart</li><li>gensturechange</li><li>genstureend</li></ul><p>event 对象 =&gt; 标准的鼠标事件 + rotation(0开始 负值表示逆时针旋转 正值表示顺时针旋转) + scale(1开始 两个手指距离变化)</p>`,108),t=[o];function p(c,r,i,d,E,y){return a(),l("div",null,t)}const m=s(e,[["render",p]]);export{h as __pageData,m as default};
