import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.7c0fadea.js";const u=JSON.parse('{"title":"实现一个简易热更新","description":"","frontmatter":{},"headers":[],"relativePath":"articles/advanced/devServer.md","filePath":"articles/advanced/devServer.md","lastUpdated":1670330848000}'),p={name:"articles/advanced/devServer.md"},e=l(`<h1 id="实现一个简易热更新" tabindex="-1">实现一个简易热更新 <a class="header-anchor" href="#实现一个简易热更新" aria-label="Permalink to &quot;实现一个简易热更新&quot;">​</a></h1><p>使用 Webpack + Nodejs(Express) 实现热更新</p><p><a href="https://github.com/LIUeng/webpack-server" target="_blank" rel="noreferrer">项目地址</a></p><h2 id="实现思考" tabindex="-1">实现思考？ <a class="header-anchor" href="#实现思考" aria-label="Permalink to &quot;实现思考？&quot;">​</a></h2><p>保存代码，webpack 监听编译代码，编译完成，通知浏览器更新页面（抛出想法，解决问题）</p><h3 id="思考一" tabindex="-1">思考一 <a class="header-anchor" href="#思考一" aria-label="Permalink to &quot;思考一&quot;">​</a></h3><p><em><strong>项目利用 Nodejs(Http) + Express 启动一个端口服务作为服务端</strong></em></p><h4 id="解答" tabindex="-1"><code>解答</code> <a class="header-anchor" href="#解答" aria-label="Permalink to &quot;\`解答\`&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 项目目录 servers/Server.js</span></span>
<span class="line"><span style="color:#6A737D;">// 启动端口</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(app);</span></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(port, hostname, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 项目目录 servers/Server.js</span></span>
<span class="line"><span style="color:#6A737D;">// 启动端口</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(app);</span></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(port, hostname, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {})</span></span></code></pre></div><h3 id="思考二" tabindex="-1">思考二 <a class="header-anchor" href="#思考二" aria-label="Permalink to &quot;思考二&quot;">​</a></h3><p>webpack 监听文件变化以及编译</p><h4 id="解答-1" tabindex="-1"><code>解答</code> <a class="header-anchor" href="#解答-1" aria-label="Permalink to &quot;\`解答\`&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 项目目录 servers/Server.js</span></span>
<span class="line"><span style="color:#6A737D;">// 这里 express 借助 webpack-dev-middware 中间件</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> middleware </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">webpackDevMiddleware</span><span style="color:#E1E4E8;">(compiler, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    logLevel: </span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 编译出错时打印日志 log</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(middleware);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 项目目录 servers/Server.js</span></span>
<span class="line"><span style="color:#6A737D;">// 这里 express 借助 webpack-dev-middware 中间件</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> middleware </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">webpackDevMiddleware</span><span style="color:#24292E;">(compiler, {</span></span>
<span class="line"><span style="color:#24292E;">    logLevel: </span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 编译出错时打印日志 log</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(middleware);</span></span></code></pre></div><ul><li>webpack-dev-middware 中间件作用</li></ul><ul><li><p>启动 webpack compiler watch [监听入口文件的变化 实时编译]</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> compiler </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">webpack</span><span style="color:#E1E4E8;">(config);</span></span>
<span class="line"><span style="color:#E1E4E8;">compiler.</span><span style="color:#B392F0;">watch</span><span style="color:#E1E4E8;">({}, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">stats</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> compiler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">webpack</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#24292E;">compiler.</span><span style="color:#6F42C1;">watch</span><span style="color:#24292E;">({}, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">stats</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {});</span></span></code></pre></div></li><li><p>作为 express 的中间件</p><ul><li><p>webpack-dev-middleware 利用 memory-fs 进行文件的记忆性生成 [实际上已经生成,没看到而已,可以配置writeToDisk] main.js</p></li><li><p>访问 <a href="http://localhost" target="_blank" rel="noreferrer">http://localhost</a>:xxxx 时获取资源文件 [webpack=&gt;output=&gt;filename] main.js</p></li></ul></li><li><p>配合 html-webpack-plugin 插件</p><ul><li>/public/index.html 模板文件 -&gt; 生成访问的html文件</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;main.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;main.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></li></ul><h3 id="思考三" tabindex="-1">思考三 <a class="header-anchor" href="#思考三" aria-label="Permalink to &quot;思考三&quot;">​</a></h3><p>实现双方通信 websocket [浏览器端][服务端]</p><h4 id="解答-2" tabindex="-1"><code>解答</code> <a class="header-anchor" href="#解答-2" aria-label="Permalink to &quot;\`解答\`&quot;">​</a></h4><p><a href="https://github.com/sockjs/sockjs-client" target="_blank" rel="noreferrer">参考 sockjs-client</a></p><p><a href="https://github.com/sockjs/sockjs-node" target="_blank" rel="noreferrer">参考 sockjs-node</a></p><ul><li><p>浏览器端(利用 sockjs-client 创建 websocket)</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 参考目录 clients/index.js</span></span>
<span class="line"><span style="color:#6A737D;">// url: http://localhost:xxxx</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> clients </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SockJsClient</span><span style="color:#E1E4E8;">(url);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// events: onopen onclose onmessage</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 参考目录 clients/index.js</span></span>
<span class="line"><span style="color:#6A737D;">// url: http://localhost:xxxx</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> clients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SockJsClient</span><span style="color:#24292E;">(url);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// events: onopen onclose onmessage</span></span></code></pre></div></li><li><p>服务端(利用 sockjs-node 创建 socket 服务)</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 参考目录 servers/Server.js</span></span>
<span class="line"><span style="color:#6A737D;">// createSocketServer</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> socketServer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sockjs</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">socketServer.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">({});</span></span>
<span class="line"><span style="color:#E1E4E8;">socketServer.</span><span style="color:#B392F0;">installHandlers</span><span style="color:#E1E4E8;">(app, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    prefix: </span><span style="color:#9ECBFF;">&#39;/xxxx&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 这里是你要创建的 socket 服务地址</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// events: send onconnection onclose</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 参考目录 servers/Server.js</span></span>
<span class="line"><span style="color:#6A737D;">// createSocketServer</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> socketServer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sockjs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">socketServer.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">({});</span></span>
<span class="line"><span style="color:#24292E;">socketServer.</span><span style="color:#6F42C1;">installHandlers</span><span style="color:#24292E;">(app, {</span></span>
<span class="line"><span style="color:#24292E;">    prefix: </span><span style="color:#032F62;">&#39;/xxxx&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 这里是你要创建的 socket 服务地址</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// events: send onconnection onclose</span></span></code></pre></div></li><li><p>如何通信并刷新浏览器</p><p>利用 webpack hooks 监听文件编译完成</p><ul><li>⚔ 服务端</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compiler.hooks.done.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dev-server&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里通过服务端 socket server 发送一组信号 通知浏览器端 onmessage</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compiler.hooks.done.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dev-server&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里通过服务端 socket server 发送一组信号 通知浏览器端 onmessage</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><ul><li><p>⚔ 浏览器端</p><ul><li><p>这里需要把浏览器端需要创建的 websocket 代码引入到 index.html 中</p></li><li><p>所以这里我们把 clients/index.js 和 项目入口 ./src/index.js 共同加入到 webpack 的 entry 中</p></li><li><p>一起打包到 webpack output 文件中</p></li><li><p>参考文件 webpack.config.js</p></li></ul></li><li><p>⚔ 刷新页面</p><ul><li><p>socekt server 发送信号 浏览器已经创建了 websocket 建立连接</p></li><li><p>收到信号 浏览器利用自身的 <code>window</code> 对象进行刷新 window.location.reload()</p></li></ul></li><li><p>⚔ 结束</p><ul><li>完成一次通信</li></ul></li></ul></li></ul><h2 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-label="Permalink to &quot;环境准备&quot;">​</a></h2><p>安装所需要的依赖包</p><ul><li>webpack</li><li>html-webpack-plugin</li><li>sockjs</li><li>sockjs-client</li><li>express</li></ul><h2 id="目录搭建" tabindex="-1">目录搭建 <a class="header-anchor" href="#目录搭建" aria-label="Permalink to &quot;目录搭建&quot;">​</a></h2><ul><li>clients 客户端</li><li>public 模板html</li><li>servers 服务端</li><li>src 页面目录</li><li>scripts 启动项目脚本目录</li></ul><h2 id="项目启动" tabindex="-1">项目启动 <a class="header-anchor" href="#项目启动" aria-label="Permalink to &quot;项目启动&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">or</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">or</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span></span></code></pre></div>`,28),o=[e];function t(c,r,i,y,E,d){return a(),n("div",null,o)}const v=s(p,[["render",t]]);export{u as __pageData,v as default};
