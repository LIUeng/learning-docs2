import{_ as l,o as i,c as a,Q as t}from"./chunks/framework.7c0fadea.js";const m=JSON.parse('{"title":"HTML 格式化上下文","description":"","frontmatter":{},"headers":[],"relativePath":"notes/css/bfc.md","filePath":"notes/css/bfc.md","lastUpdated":1689042901000}'),o={name:"notes/css/bfc.md"},e=t('<h1 id="html-格式化上下文" tabindex="-1">HTML 格式化上下文 <a class="header-anchor" href="#html-格式化上下文" aria-label="Permalink to &quot;HTML 格式化上下文&quot;">​</a></h1><h2 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h2><p>BFC - block formatting context 块级格式化上下文</p><div class="tip custom-block"><p class="custom-block-title">BFC 概念</p><p>文档最外层元素使用块布局规则称为初始块格式上下文</p></div><h3 id="css-属性创建-bfc" tabindex="-1">CSS 属性创建 BFC <a class="header-anchor" href="#css-属性创建-bfc" aria-label="Permalink to &quot;CSS 属性创建 BFC&quot;">​</a></h3><p>适用以下的方法可以创建一个新的 BFC</p><ul><li>使用 float 时其浮动的元素</li><li>绝对定位的元素 （position: absolute/fixed/sticky）</li><li>display: inline-block</li><li>表格单元格 display: table-cell，包括使用所有 table-* 属性的所有表格单元格</li><li>块级元素的 overflow 属性不为 visible</li><li>元素属性为 display: flow-root/list-item</li><li>元素属性为 contain: layout/content/strict</li><li>flex items（display: flex 容器布局下的子元素）</li><li>gird 布局（display: grid 容器布局下的子元素）</li><li>multicol containers 多列容器（column-count: 1 或 column-width 不为 auto）</li><li>元素属性 column-span: all</li></ul><blockquote><p>创建新的 BFC 的行为与最外层的文档非常相似，主布局中创造了一个小布局，包含了其内部所有的内容</p></blockquote><blockquote><p>float &amp; clear</p></blockquote><ol><li>float(脱离文档流) 和 clear 仅适用于同一格式上下文中的项目，页边距仅在同一格式上下文中的元素之间折叠</li><li>浮动不会影响其他 BFC 中元素的布局，而清除浮动只能清除同一 BFC 在它前面的元素的浮动</li></ol><h3 id="解决了什么问题" tabindex="-1">解决了什么问题 <a class="header-anchor" href="#解决了什么问题" aria-label="Permalink to &quot;解决了什么问题&quot;">​</a></h3><blockquote><p>高度塌陷问题</p></blockquote><ul><li>子元素设置 float 父容器高度塌陷</li></ul><blockquote><p>外边距重叠问题</p></blockquote><ul><li>创建新的 BFC 避免两个块元素之间的外边距合并问题</li></ul><h2 id="ifc" tabindex="-1">IFC <a class="header-anchor" href="#ifc" aria-label="Permalink to &quot;IFC&quot;">​</a></h2><p>IFC - inline formatting context 行内格式化上下文</p><div class="tip custom-block"><p class="custom-block-title">IFC 概念</p><p>一个块元素内存在内联元素，一次排列；内联格式上下文存在于其他格式上下文中，可以将其视为段落的上下文</p></div><h3 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h3><ul><li>行内元素设置水平间距可以适用</li><li>行内元素设置垂直间距不适用（可能会在内容的上方和下方重叠）</li><li>行内格式化上下文填充和边框不会将行框撑开</li></ul><h2 id="flow-layout" tabindex="-1">Flow Layout <a class="header-anchor" href="#flow-layout" aria-label="Permalink to &quot;Flow Layout&quot;">​</a></h2><p>流式布局(正常流)</p><ul><li>CSS2.1 水平写入模式</li></ul><h2 id="writing-mode" tabindex="-1">Writing Mode <a class="header-anchor" href="#writing-mode" aria-label="Permalink to &quot;Writing Mode&quot;">​</a></h2><p>书写模式（书写模式、方向、文本方向属性决定）</p><ul><li>css =&gt; writing-mode: verticla-lr, horizontal-tb, vertical-rl</li></ul><h3 id="说明-1" tabindex="-1">说明 <a class="header-anchor" href="#说明-1" aria-label="Permalink to &quot;说明&quot;">​</a></h3><ul><li>图像不会改变方向</li><li>块元素应用书写模式，改变文字方向，块元素不发生旋转</li></ul><h2 id="外边距重叠" tabindex="-1">外边距重叠 <a class="header-anchor" href="#外边距重叠" aria-label="Permalink to &quot;外边距重叠&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">概念</p><p>块的上外边距和下外边距有时合并（折叠）为单个边距，其大小为单个边距的最大值（如果相等，取其中一个）</p></div><ul><li>有设定 float 和 position:absolute 的元素不产生外边距重叠问题</li></ul><h3 id="情形" tabindex="-1">情形 <a class="header-anchor" href="#情形" aria-label="Permalink to &quot;情形&quot;">​</a></h3><blockquote><p>同一层相邻元素</p></blockquote><p>相邻的两个元素之间的外边距重叠，除非后一个元素加上 clearfix 清除浮动</p><blockquote><p>没有内容将父元素和后代元素分开</p></blockquote><ol><li>父级 margin-top(没有边框、内边距、行内内容、BFC、清除浮动 clearfix)，子元素的 margin-top 会与父元素重叠，并且溢出；</li><li>父级 margin-bottom(没有边框、内边距、行内内容、高度 height min-height max-height)，子元素的 margin-bottom 会与父元素重叠，并且溢出。</li></ol><blockquote><p>空的块级元素</p></blockquote><p>块元素（没有边框、内边距、行内内容、高度 height min-height max-height、inline、clearfix)，margin-top 和 margin-bottom 会发生重叠</p><blockquote><p>外边距为负值</p></blockquote><ol><li>参与折叠的外边距包含负值，折叠后的外边距的最大的正边距与最小的负边距（绝对值最大的负边距）；</li><li>所有参与折叠的元素外边距都为负值，折叠后的外边距的值为最小的负边距的值。</li></ol>',40),c=[e];function r(s,n,u,h,p,d){return i(),a("div",null,c)}const f=l(o,[["render",r]]);export{m as __pageData,f as default};
