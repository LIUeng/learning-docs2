import{_ as e,o as a,c as i,Q as r}from"./chunks/framework.0e8ae64e.js";const m=JSON.parse('{"title":"Script Link 标签","description":"","frontmatter":{},"headers":[],"relativePath":"articles/basic/script_link.md","filePath":"articles/basic/script_link.md","lastUpdated":1670330848000}'),o={name:"articles/basic/script_link.md"},t=r('<h1 id="script-link-标签" tabindex="-1">Script Link 标签 <a class="header-anchor" href="#script-link-标签" aria-label="Permalink to &quot;Script Link 标签&quot;">​</a></h1><p><code>defer async 只适用于外部脚本中</code></p><h2 id="defer" tabindex="-1">defer <a class="header-anchor" href="#defer" aria-label="Permalink to &quot;defer&quot;">​</a></h2><p><code>延迟脚本</code></p><p>兼容性：IE4、Firefox 3.5、Safari 5 和 Chrome</p><ol><li><p>多个延迟脚本按顺序执行，并先于 DOMContentLoaded 事件执行</p></li><li><p>现实当中，多个延迟脚本不一定会按照顺序执行，也不一定会在 DOMContentLoaded 事件执行，因此最好包含一个延迟脚本</p></li></ol><h2 id="async" tabindex="-1">async <a class="header-anchor" href="#async" aria-label="Permalink to &quot;async&quot;">​</a></h2><p><code>异步脚本</code></p><p>兼容性：Firefox 3.6、Safari 5 和 Chrome</p><ol><li><p>多个异步脚本先后顺序不一致执行，最好不要在此修改 dom 操作</p></li><li><p>异步脚本一定会在 load 事件之前执行，在 DOMContentLoaded 事件不一定之前还是之后</p></li></ol><h2 id="crossorigin" tabindex="-1">crossorigin <a class="header-anchor" href="#crossorigin" aria-label="Permalink to &quot;crossorigin&quot;">​</a></h2>',11),c=[t];function s(n,l,d,p,_,h){return a(),i("div",null,c)}const k=e(o,[["render",s]]);export{m as __pageData,k as default};
